# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-25 00:27
from __future__ import unicode_literals

from django.db import migrations, transaction
import os.path


@transaction.atomic
def transfer_crd_to_md(apps, schema_editor):
    """
    Create MethodDependencies from CodeResourceDependencies.
    """
    CodeResourceDependency = apps.get_model("method", "CodeResourceDependency")

    for crd in CodeResourceDependency.objects.all():
        transfer_crd_helper(crd)


def transfer_crd_helper(original_crd, current_crd=None, path_accumulator=None):
    """
    Creates appropriate MethodDependencies for a CodeResourceDependency.

    current_crd specifies a CodeResourceDependency that is "above" original_crd -- i.e.
    something that depends on original_crd is itself a dependency for something else --
    or equal to it.  If it is None, then it's set to original_crd.

    path_accumulator keeps track of the path (relative to the sandbox path) that
    the code should be installed in.

    If the requirement part of original_crd is a meta-package, we do nothing.
    Its dependencies should be handled with their own calls to transfer_crd_helper.

    A MethodDependency is created for any Method that used
    current_crd.coderesourcerevision as a driver.

    It then recurses up a layer, looking at any other CodeResourceRevisions that
    depended on current_crd.coderesourcerevision.
    """
    current_crd = current_crd or original_crd
    path_accumulator = path_accumulator or ""

    if not original_crd.requirement.content_file:
        # The dependency is a meta-package, so we bail.
        return

    path_accumulator = os.path.join(current_crd.depPath, path_accumulator)

    for method in current_crd.coderesourcerevision.methods.all():
        # Create a MethodDependency for this Method.
        method.dependencies.create(
            requirement=original_crd.requirement,
            path=path_accumulator,
            filename=original_crd.depFileName
        )

    # Recursive step: look and see if current_crd is depended on by any other CodeResourceRevisions.
    for parent_crd in current_crd.coderesourcerevision.needed_by.all():
        transfer_crd_helper(original_crd, parent_crd, path_accumulator)


class Migration(migrations.Migration):

    dependencies = [
        ('method', '0012_methoddependency'),
    ]

    operations = [
        migrations.RunPython(transfer_crd_to_md, reverse_code=migrations.RunPython.noop),
    ]
