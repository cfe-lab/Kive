# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-05-06 21:19
from __future__ import unicode_literals

from django.db import migrations, transaction
from django.db.models import Q
from django.core.exceptions import ObjectDoesNotExist


@transaction.atomic
def check_state_fields_set(apps, schema_editor):
    """
    Asserts that all Runs and RunComponents have their _complete and _successful fields set.
    """
    Run = apps.get_model("archive", "Run")
    RunComponent = apps.get_model("archive", "RunComponent")

    if Run.objects.filter(Q(_complete__isnull=True) | Q(_successful__isnull=True)).exists():
        raise AssertionError("All Runs must have their _complete and _successful flags set before migrating")

    if RunComponent.objects.filter(Q(_complete__isnull=True) | Q(_successful__isnull=True)).exists():
        raise AssertionError("All RunComponents must have their _complete and _successful flags set"
                             "before migrating")


@transaction.atomic
def transition_state_fields(apps, schema_editor):
    """
    Update Runs and RunComponents to use the _runstate and _runcomponentstate fields.
    """
    Run = apps.get_model("archive", "Run")
    RunState = apps.get_model("archive", "RunState")
    RunComponent = apps.get_model("archive", "RunComponent")
    RunComponentState = apps.get_model("archive", "RunComponentState")

    for rc in RunComponent.objects.all():
        if not rc._complete:
            if rc.start_time is None:
                rc._runcomponentstate = RunComponentState.objects.get(name="Pending")
            else:
                rc._runcomponentstate = RunComponentState.objects.get(name="Running")
        else:
            if rc._successful:
                rc._runcomponentstate = RunComponentState.objects.get(name="Successful")
            elif rc.is_cancelled:
                rc._runcomponentstate = RunComponentState.objects.get(name="Cancelled")
            else:
                rc._runcomponentstate = RunComponentState.objects.get(name="Failed")
        rc.save()

    for run in Run.objects.all():
        if not run._complete:
            if run.start_time is None:
                if run.stopped_by is None:
                    run._runstate = RunState.objects.get(name="Cancelling")
                else:
                    run._runstate = RunState.objects.get(name="Pending")
            else:
                if not run._successful:
                    run._runstate = RunState.objects.get(name="Failing")  # Failing takes precedence over Cancelling
                elif run.stopped_by is not None:
                    run._runstate = RunState.objects.get(name="Cancelling")
                else:
                    run._runstate = RunState.objects.get(name="Running")

        else:
            try:
                run.not_enough_CPUs
                exceeds_system_capabilities = True
            except ObjectDoesNotExist:
                exceeds_system_capabilities = False

            if run._successful:
                run._runstate = RunState.objects.get(name="Successful")
            elif run.stopped_by is not None or exceeds_system_capabilities:
                run._runstate = RunState.objects.get(name="Cancelled")
            else:
                run._runstate = RunState.objects.get(name="Failed")
        run.save()


@transaction.atomic
def revert_state_fields(apps, schema_editor):
    """
    Revert Runs/RunComponents to the old state fields.
    """
    Run = apps.get_model("archive", "Run")
    RunComponent = apps.get_model("archive", "RunComponent")

    for rc in RunComponent.objects.all():
        if rc._runcomponentstate.name in ("Pending", "Running"):
            rc._complete = False
            rc._successful = True
            rc.is_cancelled = False
        elif rc._runcomponentstate.name == "Successful":
            rc._complete = True
            rc._successful = True
            rc.is_cancelled = False
        elif rc._runcomponentstate.name == "Cancelled":
            rc._complete = True
            rc._successful = False
            rc.is_cancelled = True
        elif rc._runcomponentstate.name in ("Failed", "Quarantined"):
            rc._complete = True
            rc._successful = False
            rc.is_cancelled = False
        rc.save()

    for run in Run.objects.all():
        if run._runstate.name in ("Pending", "Running"):
            run._complete = False
            run._successful = True
        elif run._runstate.name in ("Cancelling", "Failing"):
            run._complete = False
            run._successful = False
        elif run._runstate.name == "Successful":
            run._complete = True
            run._successful = True
        elif run._runstate.name in ("Cancelled", "Failed", "Quarantined"):
            run._complete = True
            run._successful = False
        run.save()


class Migration(migrations.Migration):

    dependencies = [
        ('archive', '0030_state_machine'),
    ]

    operations = [
        migrations.RunPython(check_state_fields_set, migrations.RunPython.noop),
        migrations.RunPython(transition_state_fields, revert_state_fields)
    ]