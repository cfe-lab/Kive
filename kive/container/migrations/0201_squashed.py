# Generated by Django 2.2.18 on 2021-04-07 23:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
from django.db.models.functions import Coalesce
import django.utils.timezone
import re


def set_submit_time(apps, schema_editor):
    ContainerRun = apps.get_model('container', 'ContainerRun')
    ContainerRun.objects.update(submit_time=Coalesce('start_time',
                                                     'end_time',
                                                     'submit_time'))


def unset_submit_time(apps, schema_editor):
    pass  # Reversal not needed.


class Migration(migrations.Migration):

    replaces = [('container', '0001_initial'),
                ('container', '0002_ordering'),
                ('container', '0003_reverse_ordering'),
                ('container', '0004_containerapp_containerargument'),
                ('container', '0005_container_run'),
                ('container', '0006_ordering'),
                ('container', '0007_run_priority'),
                ('container', '0008_slurm_job_id'),
                ('container', '0009_containerrun_submit_time'),
                ('container', '0010_purging_sandboxes'),
                ('container', '0011_containerlog_log_size'),
                ('container', '0012_containerlog_upload'),
                ('container', '0013_container_size'),
                ('container', '0014_container_ordering'),
                ('container', '0015_parent'),
                ('container', '0016_container_file_help_text'),
                ('container', '0017_container_details'),
                ('container', '0018_containerrun_original_run'),
                ('container', '0019_containerrun_md5'),
                ('container', '0020_containerrun_is_warned'),
                ('container', '0021_containerdataset_multi_position')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('librarian', '0106_dataset_name_not_blank'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContainerFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('git', models.CharField(blank=True, help_text='URL of Git repository that containers were built from', max_length=2000, verbose_name='Git URL')),
                ('groups_allowed', models.ManyToManyField(blank=True, help_text='What groups have access?', related_name='container_containerfamily_has_access_to', to='auth.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_allowed', models.ManyToManyField(blank=True, help_text='Which users have access?', related_name='container_containerfamily_has_access_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Singularity container file', upload_to=b'CodeResources', verbose_name=b'Container file')),
                ('tag', models.CharField(help_text='Git tag or revision name', max_length=128, verbose_name='Tag')),
                ('description', models.CharField(blank=True, max_length=1000, verbose_name='Description')),
                ('md5', models.CharField(blank=True, help_text='Validates file integrity', max_length=64, validators=[django.core.validators.RegexValidator(message='MD5 checksum is not either 32 hex characters or blank', regex=re.compile('(^[0-9A-Fa-f]{32}$)|(^$)'))])),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When this was added to Kive.')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='container.ContainerFamily')),
                ('groups_allowed', models.ManyToManyField(blank=True, help_text='What groups have access?', related_name='container_container_has_access_to', to='auth.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_allowed', models.ManyToManyField(blank=True, help_text='Which users have access?', related_name='container_container_has_access_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ['family__name', '-tag'],
            },
        ),
        migrations.CreateModel(
            name='ContainerApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Leave blank for default', max_length=60)),
                ('description', models.CharField(blank=True, max_length=1000, verbose_name='Description')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apps', to='container.Container')),
                ('memory', models.PositiveIntegerField(default=6000, help_text='Megabytes of memory Slurm will allocate for this app (0 allocates all memory)', verbose_name='Memory required (MB)')),
                ('threads', models.PositiveIntegerField(default=1, help_text='How many threads does this app use during execution?', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of threads')),
            ],
            options={
                'ordering': ('-container_id', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ContainerArgument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('position', models.IntegerField(blank=True, help_text='Position in the arguments (gaps and duplicates are allowed). Leave position blank to pass as an option with --name.', null=True)),
                ('type', models.CharField(choices=[('I', 'Input'), ('O', 'Output')], max_length=1)),
                ('allow_multiple', models.BooleanField(default=False, help_text='True for optional inputs that accept multiple datasets and outputs that just collect all files written to a directory')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arguments', to='container.ContainerApp')),
            ],
            options={
                'ordering': ('app_id', 'type', 'position', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of this batch of container runs', max_length=60, verbose_name='Batch Name')),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('groups_allowed', models.ManyToManyField(blank=True, help_text='What groups have access?', related_name='container_batch_has_access_to', to='auth.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_allowed', models.ManyToManyField(blank=True, help_text='Which users have access?', related_name='container_batch_has_access_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ContainerRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, help_text='Starting time', null=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, help_text='Ending time', null=True, verbose_name='end time')),
                ('name', models.CharField(blank=True, max_length=60)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('state', models.CharField(choices=[('N', 'New'), ('L', 'Loading'), ('R', 'Running'), ('S', 'Saving'), ('C', 'Complete'), ('F', 'Failed'), ('X', 'Cancelled')], default='N', max_length=1)),
                ('sandbox_path', models.CharField(blank=True, max_length=4096)),
                ('return_code', models.IntegerField(blank=True, null=True)),
                ('is_redacted', models.BooleanField(default=False, help_text='True if the outputs or logs were redacted for sensitive data')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='container.ContainerApp')),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='container.Batch')),
                ('groups_allowed', models.ManyToManyField(blank=True, help_text='What groups have access?', related_name='container_containerrun_has_access_to', to='auth.Group')),
                ('stopped_by', models.ForeignKey(blank=True, help_text='User that stopped this run', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='container_runs_stopped', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_allowed', models.ManyToManyField(blank=True, help_text='Which users have access?', related_name='container_containerrun_has_access_to', to=settings.AUTH_USER_MODEL)),
                ('priority', models.IntegerField(default=0, help_text='Chooses which slurm queue to use.')),
                ('slurm_job_id', models.IntegerField(blank=True, null=True)),
                ('submit_time', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, help_text='When this job was put in the queue.')),
            ],
            options={
                'abstract': False,
                'ordering': ('-submit_time',),
            },
        ),
        migrations.CreateModel(
            name='ContainerLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('O', 'stdout'), ('E', 'stderr')], max_length=1)),
                ('short_text', models.CharField(blank=True, help_text="Holds the log text if it's shorter than the max length.", max_length=2000)),
                ('long_text', models.FileField(help_text="Holds the log text if it's longer than the max length.", upload_to=b'')),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='container.ContainerRun')),
            ],
        ),
        migrations.CreateModel(
            name='ContainerDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Local file name, also used to sort multiple inputs for a single argument.', max_length=60)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When this was added to Kive.')),
                ('argument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to='container.ContainerArgument')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='librarian.Dataset')),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to='container.ContainerRun')),
            ],
            options={
                'ordering': ('run', 'argument__type', 'argument__position', 'argument__name'),
            },
        ),
        migrations.RunPython(set_submit_time, unset_submit_time),
        migrations.AddField(
            model_name='containerrun',
            name='sandbox_size',
            field=models.BigIntegerField(blank=True, help_text='Size of the sandbox in bytes.  If null, this has not been computed yet.', null=True),
        ),
        migrations.AddField(
            model_name='containerlog',
            name='log_size',
            field=models.BigIntegerField(blank=True, help_text='Size of the log file in bytes.  If null, this has not been computed yet, or the log is shortand not stored in a file.', null=True),
        ),
        migrations.AlterField(
            model_name='containerlog',
            name='long_text',
            field=models.FileField(help_text="Holds the log text if it's longer than the max length.", upload_to='ContainerLogs'),
        ),
        migrations.AddField(
            model_name='container',
            name='file_size',
            field=models.BigIntegerField(blank=True, help_text='Size of the container file in bytes.  If null, this has not been computed yet.', null=True),
        ),
        migrations.AlterField(
            model_name='container',
            name='file',
            field=models.FileField(help_text='Singularity container file', upload_to='Containers', verbose_name='Container file'),
        ),
        migrations.AlterModelOptions(
            name='container',
            options={'ordering': ['family__name', '-created']},
        ),
        migrations.AddField(
            model_name='container',
            name='file_type',
            field=models.CharField(choices=[('SIMG', 'Singularity'), ('ZIP', 'Zip'), ('TAR', 'Tar')], default='SIMG', max_length=20),
        ),
        migrations.AlterField(
            model_name='container',
            name='file',
            field=models.FileField(help_text='Singularity or archive container file', upload_to='Containers', verbose_name='Container file'),
        ),
        migrations.AddField(
            model_name='container',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Singularity container that an archive container runs in', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='container.Container'),
        ),
        migrations.AddField(
            model_name='containerrun',
            name='original_run',
            field=models.ForeignKey(blank=True, help_text='This run is a rerun of the original.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reruns', to='container.ContainerRun'),
        ),
        migrations.AddField(
            model_name='containerrun',
            name='md5',
            field=models.CharField(blank=True, help_text="Summary of MD5's for inputs, outputs, and containers.", max_length=64, validators=[django.core.validators.RegexValidator(message='MD5 checksum is not either 32 hex characters or blank', regex=re.compile('(^[0-9A-Fa-f]{32}$)|(^$)'))]),
        ),
        migrations.AddField(
            model_name='containerrun',
            name='is_warned',
            field=models.BooleanField(default=False, help_text='True if a warning was logged because the Slurm job failed.'),
        ),
        migrations.AddField(
            model_name='containerdataset',
            name='multi_position',
            field=models.PositiveIntegerField(default=None, help_text='Position in a multi-valued argument (None for single-value arguments).', null=True),
        ),
    ]
