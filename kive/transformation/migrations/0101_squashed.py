# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-06-02 22:31
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        # ('metadata', '0101_squashed'),
    ]

    operations = [
        migrations.CreateModel(
            name='Transformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision_name', models.CharField(blank=True, help_text='The name of this transformation revision', max_length=60, verbose_name='Transformation revision name')),
                ('revision_DateTime', models.DateTimeField(auto_now_add=True, verbose_name='Revision creation date')),
                ('revision_desc', models.TextField(blank=True, help_text='Description of this transformation revision', max_length=1000, verbose_name='Transformation revision description')),
                ('groups_allowed', models.ManyToManyField(blank=True, help_text='What groups have access?', related_name='transformation_transformation_has_access_to', to=b'auth.Group')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_allowed', models.ManyToManyField(blank=True, help_text='Which users have access?', related_name='transformation_transformation_has_access_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransformationXput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('y', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='TransformationOutput',
            fields=[
                ('transformationxput_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='transformation.TransformationXput')),
                ('dataset_name', models.CharField(help_text='Name for output as an alternative to index', max_length=60, verbose_name='output name')),
                ('dataset_idx', models.PositiveIntegerField(help_text='Index defining the relative order of this output', validators=[django.core.validators.MinValueValidator(1)], verbose_name='output index')),
                ('transformation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='transformation.Transformation')),
            ],
            bases=('transformation.transformationxput',),
        ),
        migrations.CreateModel(
            name='TransformationInput',
            fields=[
                ('transformationxput_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='transformation.TransformationXput')),
                ('dataset_name', models.CharField(help_text='Name for input as an alternative to index', max_length=60, verbose_name='input name')),
                ('dataset_idx', models.PositiveIntegerField(help_text='Index defining the relative order of this input', validators=[django.core.validators.MinValueValidator(1)], verbose_name='input index')),
                ('transformation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='transformation.Transformation')),
            ],
            bases=('transformation.transformationxput',),
        ),
        migrations.AlterUniqueTogether(
            name='transformationoutput',
            unique_together=set([('transformation', 'dataset_name'), ('transformation', 'dataset_idx')]),
        ),
        migrations.AlterUniqueTogether(
            name='transformationinput',
            unique_together=set([('transformation', 'dataset_name'), ('transformation', 'dataset_idx')]),
        ),
        migrations.CreateModel(
            name='XputStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_row', models.PositiveIntegerField(blank=True, help_text='Minimum number of rows this input/output returns', null=True, verbose_name='Minimum rows')),
                ('max_row', models.PositiveIntegerField(blank=True, help_text='Maximum number of rows this input/output returns', null=True, verbose_name='Maximum rows')),
                ('compounddatatype', models.IntegerField(db_column='compounddatatype_id')),
                ('transf_xput', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='structure', to='transformation.TransformationXput')),
            ],
        ),
        migrations.AlterField(
            model_name='transformationinput',
            name='dataset_name',
            field=models.CharField(help_text='Name for input as an alternative to index', max_length=60, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+$'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='input name'),
        ),
        migrations.AlterField(
            model_name='transformationoutput',
            name='dataset_name',
            field=models.CharField(help_text='Name for output as an alternative to index', max_length=60, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+$'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='output name'),
        ),
        migrations.AlterField(
            model_name='transformationinput',
            name='dataset_name',
            field=models.CharField(help_text='Name for input as an alternative to index', max_length=60, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='input name'),
        ),
        migrations.AlterField(
            model_name='transformationoutput',
            name='dataset_name',
            field=models.CharField(help_text='Name for output as an alternative to index', max_length=60, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')], verbose_name='output name'),
        ),
        migrations.AlterModelOptions(
            name='transformationinput',
            options={'ordering': ('dataset_idx',)},
        ),
        migrations.AlterModelOptions(
            name='transformationoutput',
            options={'ordering': ('dataset_idx',)},
        ),
    ]
