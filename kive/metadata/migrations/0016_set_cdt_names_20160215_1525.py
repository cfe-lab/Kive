# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-15 23:25
from __future__ import unicode_literals

from django.db import migrations, transaction


@transaction.atomic
def set_cdt_names(apps, schema_editor):
    """
    Set the names of all CompoundDatatypes.
    """
    CompoundDatatype = apps.get_model("metadata", "CompoundDatatype")
    CompoundDatatypeMember = apps.get_model("metadata", "CompoundDatatypeMember")
    Datatype = apps.get_model("metadata", "Datatype")
    for cdt in CompoundDatatype.objects.all():
        # Since methods of the CDT are not available here (and we wouldn't want
        # this procedure to change later), we recreate the _format() method.
        members = CompoundDatatypeMember.objects.filter(compounddatatype=cdt).order_by("column_idx")

        string_rep = "("

        member_reps = []
        for member in members:
            # This is a copy of the _str_ method of CompoundDatatypeMember.
            dt = Datatype.objects.get(pk=member.datatype.pk)
            blankable_marker = "?" if member.blankable else ""
            member_rep = '{}: {}{}'.format(member.column_name,
                                           dt.name,
                                           blankable_marker)
            member_reps.append(member_rep)

        string_rep += ", ".join(member_reps)

        string_rep += ")"
        if string_rep == "()":
            string_rep = "[empty CompoundDatatype]"

        cdt.name = string_rep
        cdt.save()


class Migration(migrations.Migration):

    dependencies = [
        ('metadata', '0015_compounddatatype_name'),
    ]

    operations = [
        migrations.RunPython(set_cdt_names, reverse_code=migrations.RunPython.noop),
    ]
