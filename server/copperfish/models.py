"""
copperfish.models

Data model for the Shipyard (Copperfish) project - open source software
that performs revision control on datasets and bioinformatic pipelines.
"""

from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic
from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver
from django.core.exceptions import ValidationError
from django.core.validators import MinValueValidator

# Python math functions
import operator
# To calculate MD5 hash
import hashlib
# Regular expressions
import re
# Augments regular expressions
import string
# For checking file paths
import os.path
import sys
import csv

class Datatype(models.Model):
    """
    Abstract definition of a semantically atomic type of data.
    Related to :model:`copperfish.CompoundDatatype`
    """

    # Implicitly defined
    #   restricted_by (self/ManyToMany)
    #   compoundDatatypeMember_set (ForeignKey)

    name = models.CharField(
        "Datatype name",
        max_length=64,
        help_text="The name for this DataType");

    # auto_now_add: set to now on instantiation (editable=False)
    date_created = models.DateTimeField(
        'Date created',
        auto_now_add = True,
        help_text="Date Datatype was defined");

    description = models.TextField(
        "Datatype description",
        help_text="A description for this DataType");

    # Datatypes aren't always generated by python but are VALIDATED
    # with Python.
    # FIXME: do we need this or is this just unnecessary
    # repetition since we have a verification script that will do the
    # requisite checking?
    Python_type = models.CharField(
        'Python variable type',
        max_length=64,
        help_text="Python type, such as String, Int, Date");

    # FIXME: Check for circularly defined restrictions -- write a clean() method
    restricts = models.ManyToManyField(
        'self',
        symmetrical=False,
        related_name="restricted_by",
        null=True,
        blank=True,
        help_text="Captures hierarchical is-a classifications among Datatypes");

    verification_script = models.FileField(
        "Verification script",
        upload_to='VerificationScripts',
        help_text="Used to validate correctness of fields labelled as being this DataType");

    
    def is_restricted_by(self, possible_restrictor_datatype):
        """
        Determine if this datatype is ever *properly* restricted, directly or indirectly,
        by a given datatype.
        
        PRE: there is no circular restriction in the possible restrictor
        datatype (this would cause an infinite recursion).
        """
        # The default is that self is not restricted by
        # possible_restrictor_datatype; toggle to True if it turns out
        # that it is.
        is_restricted = False
        restrictions = possible_restrictor_datatype.restricts.all()

        for restrictedDataType in restrictions:

            # Case 1: If restrictions restrict self, return true
            if restrictedDataType == self:
                is_restricted = True

            # Case 2: Check if any restricted Datatypes themselves restrict self
            else:
                theValue = self.is_restricted_by(restrictedDataType)

                # If any restricted Datatypes themselves restrict self, propagate
                # this information to the parent Datatype as restricting self
                if theValue == True:
                    is_restricted = True

        # Return False if Case 1 is never encountered
        return is_restricted

    # FIXME: when we start with execute, we'll use this to test
    # whether a specified column in a CSV file conforms to this
    # Datatype.
    #def check_CSV_column(csv_file, col_num):
    #    pass
    # We could also do it with the following:
    def check_conforming(csv_entry):
        pass

    def clean(self):
        if hasattr(self, "restricts") and self.is_restricted_by(self):
            raise ValidationError("Circular Datatype restriction detected");

    def __unicode__(self):
        """Describe Datatype by name"""
        return self.name;

class CompoundDatatypeMember(models.Model):
    """
    A data type member of a particular CompoundDatatype.
    Related to :model:`copperfish.Dataset`
    Related to :model:`copperfish.CompoundDatatype`
    """

    compounddatatype = models.ForeignKey(
            "CompoundDatatype",
            related_name="members",
            help_text="Links this DataType member to a particular CompoundDataType");

    datatype = models.ForeignKey(
            Datatype,
            help_text="Specifies which DataType this member is");

    column_name = models.CharField(
            "Column name",
            max_length=128,
            help_text="Gives datatype a 'collumn name' as an alternative to collumn index");

    # MinValueValidator(1) constrains column_idx to be >= 1
    column_idx = models.PositiveIntegerField(
            validators=[MinValueValidator(1)],
            help_text="The column number of this DataType");

    # Define database indexing rules to ensure tuple uniqueness
    # A compoundDataType cannot have 2 member definitions with the same column name or column number
    class Meta:
        unique_together = (("compounddatatype", "column_name"),
                           ("compounddatatype", "column_idx"));

    def __unicode__(self):
        """Describe a CompoundDatatypeMember with it's column number, datatype name, and column name"""

        returnString = u"{}: <{}> [{}]".format( self.column_idx,
                                                unicode(self.datatype),
                                                self.column_name);

        return returnString

class CompoundDatatype(models.Model):
    """
    A definition of a structured collection of datatypes,
    the resultant data structure serving as inputs or outputs
    for a Transformation.

    Related to :model:`copperfish.CompoundDatatypeMember`
    Related to :model:`copperfish.Dataset`
    """

    # Implicitly defined:
    #   members (CompoundDatatypeMember/ForeignKey)
    #   Conforming_datasets (Dataset/ForeignKey)

    def __unicode__(self):
        """ Represent CompoundDatatype with a list of it's members """

        string_rep = u"(";

        # Get the members for this compound data type
        all_members = self.members.all();

        # A) Get the column index for each member
        member_indices = [member.column_idx for member in all_members];

        # B) Get the column index of each Datatype member, along with the Datatype member itself
        members_with_indices = [ (member_indices[i], all_members[i]) for i in range(len(all_members))];
        # Can we do this?
        # members_with_indices = [ (all_members[i].column_idx, all_members[i])
        #                          for i in range(len(all_members))];

        # Sort members using column index as a basis (operator.itemgetter(0))
        members_with_indices = sorted(  members_with_indices,
                                        key=operator.itemgetter(0));

        # Add sorted Datatype members to the string representation
        for i, colIdx_and_member in enumerate(members_with_indices):
            colIdx, member = colIdx_and_member;
            string_rep += unicode(member);

            # Add comma if not at the end of member list
            if i != len(members_with_indices) - 1:
                string_rep += ", ";

        string_rep += ")";

        if string_rep == "()":
            string_rep = "[empty CompoundDatatype]";

        return string_rep;

    # clean() is executed prior to save() to perform model validation
    def clean(self):
        """Check if Datatype members have consecutive indices from 1 to n"""
        column_indices = [];

        # += is shorthand for extend() - concatenate a list with another list
        for member in self.members.all():
            column_indices += [member.column_idx];

        # Check if the sorted list is exactly a sequence from 1 to n
        if sorted(column_indices) != range(1, self.members.count()+1):
            raise ValidationError("Column indices are not consecutive starting from 1");

 
class CodeResource(models.Model):
    """
    A CodeResource is any file tracked by ShipYard.
    Related to :model:`copperfish.CodeResourceRevision`
    """

    # Implicitly defined
    #   revisions (codeResourceRevision/ForeignKey)

    name = models.CharField(
            "Resource name",
            max_length=255,
            help_text="The name for this resource");

    filename = models.CharField(
            "Resource file name",
            max_length=255,
            help_text="The filename for this resource",
            blank=True);

    description = models.TextField("Resource description");

    def isValidFileName(self):

        # Code resources have no filenames if they are a meta-package of dependencies
        if self.filename == "":
            return True
    
        # File names cannot start with 1 or more spaces
        if re.search("^\s+", self.filename):
            return False

        # Names cannot end with 1 or more trailing spaces
        if re.search("\s+$", self.filename):
            return False

        # Names must be 1 or more of any from {alphanumeric, space, "-._()"}
        # This will prevent "../" as it contains a slash
        regex = "^[-_.() {}{}]+$".format(string.ascii_letters, string.digits)
        if re.search(regex, self.filename):
            pass
        else:
            return False

        return True

    def clean(self):
        """
        CodeResource name must be valid.

        It must not contain a leading space character or "..",
        must not end in space, and be composed of letters,
        numbers, dash, underscore, paranthesis, and space.
        """
        
        if self.isValidFileName():
            pass
        else:
            raise ValidationError("Invalid code resource filename");


    def __unicode__(self):
        return self.name;
    

class CodeResourceRevision(models.Model):
    """
    A particular revision of a code resource.

    Related to :model:`copperfish.CodeResource`
    Related to :model:`copperfish.CodeResourceDependency`
    Related to :model:`copperfish.Method`
    """

    # Implicitly defined
    #   descendents (self/ForeignKey)
    #   dependencies (CodeResourceDependency/ForeignKey)
    #   needed_by (CodeResourceDependency/ForeignKey)
    #   method_set (Method/ForeignKey)

    coderesource = models.ForeignKey(
            CodeResource,
            related_name="revisions");  
        
    revision_name = models.CharField(
            max_length=128,
            help_text="A name to differentiate revisions of a CodeResource");

    revision_DateTime = models.DateTimeField(
            auto_now_add=True,
            help_text="Date this resource revision was uploaded");

    revision_parent = models.ForeignKey(
            'self',
            related_name="descendants",
            null=True,
            blank=True);

    revision_desc = models.TextField(
            "Revision description",
            help_text="A description for this particular resource revision");

    content_file = models.FileField(
            "File contents",
            upload_to="CodeResources",
            null=True,
            blank=True,
            help_text="File contents of this code resource revision");

    MD5_checksum = models.CharField(
            max_length=64,
            blank=True,
            help_text="Used to validate file contents of this resource revision");

    def __unicode__(self):
        """Represent a resource revision by it's CodeResource name and revision name"""
        
        # Admin can create CR without save() and allow CRRev to be created in memory
        # So, in MEMORY, a revision can temporarily have no corresponding CodeResource
        if not hasattr(self, "coderesource"):
            returnCodeResource = u"[no code resource set]"
        else:
            returnCodeResource = unicode(self.coderesource)

        if self.revision_name == "":
            returnRevisionName = u"[no revision name]"
        else:
            returnRevisionName = unicode(self.revision_name)

        string_rep = unicode(returnCodeResource + ' ' + returnRevisionName)
        return string_rep

    # This CRR includes it's own filename at the root
    def list_all_filepaths(self):
        """Return all filepaths associated with this CodeResourceRevision.

        Filepaths are listed recursively following a root-first scheme,
        with the filepaths of the children listed in order.
        """
        return self.list_all_filepaths_h(self.coderesource.filename)

    # Self is be a dependency CRR, base_name is it's file name, specified either
    # by the parent dependency layer, or in the case of a top-level CR, just CRR.name
    def list_all_filepaths_h(self, base_name):

        # Filepath includes the original file which has dependencies
        # If just a library of dependencies (IE, base_name=""), don't add base_path
        all_filepaths = []
        if base_name != "":
            all_filepaths = [unicode(base_name)]

        # For each dependency in this code resource revision
        for dep in self.dependencies.all():

            # Get all file paths of the CR of the child dependency relative to itself
            dep_fn = dep.depFileName;
            # If depFileName is blank, check and see if the corresponding CodeResource
            # had a filename (i.e. if this is a non-metapackage CRR and so there is
            # an associated file).
            if dep_fn == "":
                dep_fn = dep.requirement.coderesource.filename;
            
            inner_dep_paths = dep.requirement.list_all_filepaths_h(dep_fn)

            # Convert the paths from being relative to the child CRR to being
            # relative to the current parent CRR by appending pathing
            # information from the dependency layer
            for paths in inner_dep_paths:
                correctedPath = os.path.join(dep.depPath, paths)
                all_filepaths.append(unicode(correctedPath))

        return all_filepaths

    def has_circular_dependence(self):
        """Detect any circular dependences defined in this CodeResourceRevision."""
        return self.has_circular_dependence_h([]);

    def has_circular_dependence_h(self, dependants):
        """Helper for has_circular_dependence.

        dependants is an accumulator that tracks all of the all of the
        CRRs that have this one as a dependency.
        """
        # Base case: self is dependant on itself, in which case, return true.
        if self in dependants:
            return True;
        
        # Recursive case: go to all dependencies and check them.
        check_dep = False;
        for dep in self.dependencies.all():
            if dep.requirement.has_circular_dependence_h(dependants + [self]):
                check_dep = True;

        return check_dep;

    def clean(self):
        """Check coherence of this CodeResourceRevision.

        Tests for any circular dependency; does this CRR depend on
        itself at all?  Also, checks for conflicts in the
        dependencies.  Finally, if there is a file specified, fill in
        the MD5 checksum.
        """
        # CodeResource can be a collection of dependencies and not contain
        # a file - in this case, MD5 has no meaning and shouldn't exist
        try:
            md5gen = hashlib.md5();
            md5gen.update(self.content_file.read());
            self.MD5_checksum = md5gen.hexdigest();

        except ValueError as e:
            self.MD5_checksum = "";

        # Check for a circular dependency.
        if self.has_circular_dependence():
            raise ValidationError("Self-referential dependency"); 

        # Check if dependencies conflict with each other
        listOfDependencyPaths = self.list_all_filepaths()
        if len(set(listOfDependencyPaths)) != len(listOfDependencyPaths):
            raise ValidationError("Conflicting dependencies");

        # If content file exists, it must have a file name
        if self.content_file and self.coderesource.filename == "":
            raise ValidationError("If content file exists, it must have a file name")

        # If no content file exists, it must not have a file name
        if not self.content_file and self.coderesource.filename != "":
            raise ValidationError("Cannot have a filename specified in the absence of a content file")

class CodeResourceDependency(models.Model):
    """
    Dependencies of a CodeResourceRevision - themselves also CodeResources.
    Related to :model:`copperfish.CodeResourceRevision`
    """

    coderesourcerevision = models.ForeignKey(CodeResourceRevision,
                         related_name="dependencies");

    # Dependency is a codeResourceRevision
    requirement = models.ForeignKey(CodeResourceRevision,
                                    related_name="needed_by");

    # Where to place it during runtime relative to the CodeResource that relies on this CodeResourceDependency
    # FIXME: specifies the subdirectory, and OPTIONALLY, the file name to adopt during execution
    depPath = models.CharField(
        "Dependency path",
        max_length=255,
        help_text="Where a code resource dependency must exist in the sandbox relative to it's parent");

    depFileName = models.CharField(
        "Dependency file name",
        max_length=255,
        help_text="The file name the dependency is given on the sandbox at execution",
        blank=True);

    def clean(self):
        """
        depPath cannot reference ".."
        """

        # Collapse down to a canonical path
        self.depPath = os.path.normpath(self.depPath)

        # Catch ".." on it's own
        if re.search("^\.\.$", self.depPath):
            raise ValidationError("depPath cannot reference ../");

        # Catch "../[whatever]"
        if re.search("^\.\./", self.depPath):
            raise ValidationError("depPath cannot reference ../");

        # This next case actually should never happen since we've collapsed down
        # to a canonical path.
        # Catch any occurrence of "/../" within a larger path (Ex: blah/../bar)
        if re.search("/\.\./", self.depPath):
            raise ValidationError("depPath cannot reference ../");

        # If the child CR is a meta-package (no filename), we cannot
        # have a depFileName as this makes no sense
        if self.requirement.coderesource.filename == "" and self.depFileName != "":
            raise ValidationError("Metapackage dependencies cannot have a depFileName");


    def __unicode__(self):
        """Represent as [codeResourceRevision] requires [dependency] as [dependencyLocation]."""
        return u"{} requires {} as {}".format(
                unicode(self.coderesourcerevision),
                unicode(self.requirement),
                os.path.join(self.depPath, self.depFileName));

class TransformationFamily(models.Model):
    """
    TransformationFamily is abstract and describes common
    parameters between MethodFamily and PipelineFamily.

    Extends :model:`copperfish.MethodFamily`
    Extends :model:`copperfish.PipelineFamily`
    """

    name = models.CharField(
            "Transformation family name",
            max_length=128,
            help_text="The name given to a group of methods/pipelines");

    description = models.TextField(
            "Transformation family description",
            help_text="A description for this collection of methods/pipelines");

    def __unicode__(self):
        """ Describe transformation family by it's name """
        return self.name;

    class Meta:
        abstract = True;

class MethodFamily(TransformationFamily):
    """
    MethodFamily groups revisions of Methods together.

    Inherits :model:`copperfish.TransformationFamily`
    Related to :model:`copperfish.Method`
    """

    # Implicitly defined:
    #   members (Method/ForeignKey)

    pass

class PipelineFamily(TransformationFamily):
    """
    PipelineFamily groups revisions of Pipelines together.

    Inherits :model:`copperfish.TransformationFamily`
    Related to :model:`copperfish.Pipeline`
    """

    # Implicitly defined:
    #   members (Pipeline/ForeignKey)

    pass


class Transformation(models.Model):
    """
    Abstract class that defines common parameters
    across Method revisions and Pipeline revisions.

    Extends :model:`copperfish.Method`
    Extends :model:`copperfish.Pipeline`
    Related to :model:`TransformationInput`
    Related to :model:`TransformationOutput`
    """

    revision_name = models.CharField(
            "Transformation revision name",
            max_length=128,
            help_text="The name of this transformation revision");

    revision_DateTime = models.DateTimeField(
            "Revision creation date",
            auto_now_add = True);

    revision_desc = models.TextField(
            "Transformation revision description",
            help_text="Description of this transformation revision");

    # inputs/outputs associated with transformations via GenericForeignKey
    # And can be accessed from within Transformations via GenericRelation
    inputs = generic.GenericRelation("TransformationInput");
    outputs = generic.GenericRelation("TransformationOutput");

    # Raw inputs/outputs corresponding to non-CSV data, e.g. FASTAs.
    raw_inputs = generic.GenericRelation("TransformationRawInput");
    raw_outputs = generic.GenericRelation("TransformationRawOutput");

    class Meta:
        abstract = True;

    def check_input_indices(self):
        """Check that input indices are numbered consecutively from 1.

        This checks both regular inputs and raw inputs.
        """

        # Append each input index (hole number) to a list
        input_nums = [];
        for curr_input in self.inputs.all():
            input_nums += [curr_input.dataset_idx];
        for curr_raw_input in self.raw_inputs.all():
            input_nums += [curr_raw_input.dataset_idx];

        # Indices must be consecutively numbered from 1 to n
        if sorted(input_nums) != range(1, self.inputs.count()+self.raw_inputs.count()+1):
            raise ValidationError(
                    "Inputs are not consecutively numbered starting from 1");

    def check_input_names(self):
        """Check that input names do not overlap.

        Regular inputs won't have overlapping names due to a uniqueness constraint,
        nor will raw inputs; this just checks that no pair of regular input and raw input
        share a name.
        """
        input_names = [curr_input.dataset_name for curr_input in self.inputs.all()];
        raw_input_names = [curr_raw_input.dataset_name
                           for curr_raw_input in self.raw_inputs.all()];
        if len(set(input_names).intersection(set(raw_input_names))) != 0:
            raise ValidationError("Input names overlap raw input names");
        
    def check_output_indices(self):
        """Check that output indices are numbered consecutively from 1.

        This checks both regular and raw outputs.
        """
        # Append each output index (hole number) to a list
        output_nums = [];
        for curr_output in self.outputs.all():
            output_nums += [curr_output.dataset_idx];
        for curr_raw_output in self.raw_outputs.all():
            output_nums += [curr_raw_output.dataset_idx];

        # Indices must be consecutively numbered from 1 to n
        if sorted(output_nums) != range(1, self.outputs.count()+self.raw_outputs.count()+1):
            raise ValidationError(
                    "Outputs are not consecutively numbered starting from 1");

    def check_output_names(self):
        """Check that output names do not overlap.

        This does the same as check_input_names, but for the outputs.
        """
        output_names = [curr_output.dataset_name for curr_output in self.outputs.all()];
        raw_output_names = [curr_raw_output.dataset_name
                           for curr_raw_output in self.raw_outputs.all()];
        if len(set(output_names).intersection(set(raw_output_names))) != 0:
            raise ValidationError("Output names overlap raw output names");

    def clean(self):
        """Validate transformation inputs and outputs."""
        self.check_input_indices();
        self.check_input_names();
        self.check_output_indices();
        self.check_output_names();

class Method(Transformation):
    """
    Methods are atomic transformations.

    Inherits from :model:`copperfish.Transformation`
    Related to :model:`copperfish.CodeResource`
    Related to :model:`copperfish.MethodFamily`
    """

    # Implicitly defined:
    #   descendants (self/ForeignKey)

    family = models.ForeignKey(
            MethodFamily,
            related_name="members");

    revision_parent = models.ForeignKey(
            "self",
            related_name = "descendants",
            null=True,
            blank=True);

    # Code resource revisions are executable if they link to Method
    driver = models.ForeignKey(CodeResourceRevision);

    def __unicode__(self):
        """Represent a method by it's revision name and method family"""
        string_rep = u"Method {} {}".format("{}", self.revision_name);

        # MethodFamily may not be temporally saved in DB if created by admin
        if hasattr(self, "family"):
            string_rep = string_rep.format(unicode(self.family));
        else:
            string_rep = string_rep.format("[family unset]");

        return string_rep;

    def save(self, *args, **kwargs):
        """
        Create or update a method revision.

        If a method revision being created is derived from a parental
        method revision, copy the parent input/outputs.
        """

        # Inputs/outputs cannot be stored in the database unless this
        # method revision has itself first been saved to the database
        super(Method, self).save(*args, **kwargs);

        # If no parent revision exists, there are no input/outputs to copy
        if self.revision_parent == None:
            return None;

        # If parent revision exists, and inputs/outputs haven't been registered,
        # copy all inputs/outputs (Including raws) from parent revision to this revision
        if (self.inputs.count() + self.outputs.count() +
                self.raw_inputs.count() + self.raw_outputs.count() == 0):

            for parent_input in self.revision_parent.inputs.all():
                self.inputs.create(
                        compounddatatype = parent_input.compounddatatype,
                        dataset_name = parent_input.dataset_name,
                        dataset_idx = parent_input.dataset_idx,
                        min_row = parent_input.min_row,
                        max_row = parent_input.max_row);

            for parent_output in self.revision_parent.outputs.all():
                self.outputs.create(
                        compounddatatype = parent_output.compounddatatype,
                        dataset_name = parent_output.dataset_name,
                        dataset_idx = parent_output.dataset_idx,
                        min_row = parent_output.min_row,
                        max_row = parent_output.max_row);

            for parent_raw_input in self.revision_parent.raw_inputs.all():
                self.raw_inputs.create(
                        dataset_name = parent_raw_input.dataset_name,
                        dataset_idx = parent_raw_input.dataset_idx);

            for parent_raw_output in self.revision_parent.raw_outputs.all():
                self.raw_outputs.create(
                        dataset_name = parent_raw_output.dataset_name,
                        dataset_idx = parent_raw_output.dataset_idx);
                

class Pipeline(Transformation):
    """
    A particular pipeline revision.

    Inherits from :model:`copperfish.Transformation`
    Related to :model:`copperfish.PipelineFamily`
    Related to :model:`copperfish.PipelineStep`
    Related to :model:`copperfish.PipelineOutputCable`
    """

    # Implicitly defined
    #   steps (PipelineStep/ForeignKey)
    #   descendants (self/ForeignKey)
    #   outcables (PipelineOutputCable/ForeignKey)

    family = models.ForeignKey(
            PipelineFamily,
            related_name="members");    

    revision_parent = models.ForeignKey(
            "self",
            related_name = "descendants",
            null=True,
            blank=True);

    def __unicode__(self):
        """Represent pipeline by revision name and pipeline family"""

        string_rep = u"Pipeline {} {}".format("{}", self.revision_name);

        # If family isn't set (if created from family admin page)
        if hasattr(self, "family"):
            string_rep = string_rep.format(unicode(self.family));
        else:
            string_rep = string_rep.format("[family unset]");

        return string_rep;

    def clean(self):
        """
        Validate pipeline revision inputs/outputs

        - Pipeline INPUTS must be consecutively numbered from 1
        - Pipeline STEPS must be consecutively starting from 1
        - Steps are clean
        - PipelineOutput(Raw)Cables are appropriately mapped from the pipeline's steps
        """
        # Transformation.clean() - check for consecutive numbering of
        # (raw)input/outputs for this pipeline as a whole
        super(Pipeline, self).clean();

        # Internal pipeline STEP numbers must be consecutive from 1 to n
        all_steps = self.steps.all();
        step_nums = [];

        for step in all_steps:
            step_nums += [step.step_num];

        if sorted(step_nums) != range(1, len(all_steps)+1):
            raise ValidationError(
                "Steps are not consecutively numbered starting from 1");

        # Check that steps are clean; this also checks the cabling between steps.
        # Note: we don't call *complete_clean* because this may refer to a
        # "transient" state of the Pipeline whereby it is not complete yet.
        for step in all_steps:
            step.clean();

        # Check pipeline output wiring for coherence
        output_indices = [];
        output_names = [];
        raw_output_names = [];

        # Validate each PipelineOutput(Raw)Cable
        for outcable in self.outcables.all():
            outcable.clean()
            output_indices += [outcable.output_idx];
            output_names += [outcable.output_name];
        for raw_outcable in self.raw_outcables.all():
            raw_outcable.clean()
            output_indices += [raw_outcable.raw_output_idx];
            raw_output_names += [raw_outcable.raw_output_name];

        # Pipeline(Raw)OutputCables must be numbered consecutively
        if (sorted(output_indices) !=
                range(1, self.outcables.count()+self.raw_outcables.count()+1)):
            raise ValidationError(
                    "Outputs are not consecutively numbered starting from 1");

        # Pipeline(Raw)OutputCables should have unique names.
        if len(set(output_names).intersection(set(raw_output_names))) != 0:
            raise ValidationError(
                "Output names overlap raw output names");

    def complete_clean(self):
        """
        Check that the pipeline is both coherent and complete.

        Coherence is checked using clean(); the tests for completeness are:
        - there is at least 1 step
        - steps are complete, not just clean
        """
        self.clean();
        
        all_steps = self.steps.all();
        if all_steps.count == 0:
            raise ValidationError("Pipeline {} has no steps".format(unicode(self)));

        for step in all_steps:
            step.complete_clean();

    def create_outputs(self):
        """ 
        Delete existing pipeline outputs, and recreate them
        from output cables (outcables and raw_outcables).

        PRE: this should only be called after the pipeline has been verified by
        clean and the (raw) outcables are known to be OK.
        """
        # Be careful if customizing delete() of TransformationOutput
        self.outputs.all().delete()

        # outcables is derived from (PipelineOutputCable/ForeignKey)
        # For each outcable, extract the cabling parameters
        for outcable in self.outcables.all():
            output_requested = outcable.provider_output;
            connect_to_output = outcable.output_name;

            output_CDT = output_requested.compounddatatype;
            if outcable.custom_outwires.all().exists():
                # If there is custom wiring, then we need to define a new
                # CDT for the output.
                # Note: the integrity of the custom wiring is already enforced
                # when you clean() the output cable.
                output_CDT = CompoundDatatype();
                output_CDT.save();
                for outwire in outcable.custom_outwires.all():
                    output_CDT.members.create(datatype=outwire.source_pin.datatype,
                                              column_name=outwire.dest_name,
                                              column_idx=outwire.dest_idx);

            # Clone the referenced PipelineStep's TransformationOutput
            # to make the specified output for the pipeline.
            self.outputs.create(compounddatatype=output_CDT,
                                dataset_name=connect_to_output,
                                dataset_idx=outcable.output_idx,
                                min_row=output_requested.min_row,
                                max_row=output_requested.max_row);

        # ERICS MOD
        self.raw_outputs.all().delete()

        # Similar (simpler) for raw outcables.
        for raw_outcable in self.raw_outcables.all():
            output_requested = raw_outcable.provider_raw_output;
            connect_to_output = raw_outcable.raw_output_name;

            # Clone the referenced PipelineStep's TransformationOutput
            # to make the specified output for the pipeline.
            self.raw_outputs.create(dataset_name=connect_to_output,
                                    dataset_idx=raw_outcable.raw_output_idx);
            

class PipelineStep(models.Model):
    """
    A step within a Pipeline representing a single transformation
    operating on inputs that are either pre-loaded (Pipeline inputs)
    or derived from previous pipeline steps within the same pipeline.

    Related to :mode;:`copperfish.Dataset`
    Related to :model:`copperfish.Pipeline`
    Related to :model:`copperfish.Transformation`
    Related to :model:`copperfish.PipelineStepInput`
    Related to :model:`copperfish.PipelineStepDelete`
    """
    pipeline = models.ForeignKey(
            Pipeline,
            related_name="steps");

    # Pipeline steps are associated with a transformation
    content_type = models.ForeignKey(
            ContentType,
            limit_choices_to = {"model__in": ("method", "pipeline")});

    object_id = models.PositiveIntegerField();
    transformation = generic.GenericForeignKey("content_type", "object_id");
    step_num = models.PositiveIntegerField(validators=[MinValueValidator(1)]);

    def __unicode__(self):
        """ Represent with the pipeline and step number """

        pipeline_name = "[no pipeline assigned]";   
        if hasattr(self, "pipeline"):
            pipeline_name = unicode(self.pipeline);
        return "{} step {}".format(pipeline_name, self.step_num);


    def recursive_pipeline_check(self, pipeline):
        """Given a pipeline, check if this step contains it.

        PRECONDITION: the transformation at this step has been appropriately
        cleaned and does not contain any circularities.  If it does this
        function can be fragile!
        """

        contains_pipeline = False;

        # Base case 1: the transformation is a method and can't possibly contain the pipeline.
        if type(self.transformation) == Method:
            contains_pipeline = False;

        # Base case 2: this step's transformation exactly equals the pipeline specified
        elif self.transformation == pipeline:
            contains_pipeline = True;

        # Recursive case: go through all of the target pipeline steps and check if
        # any substeps exactly equal the transformation: if it does, we have circular pipeline references
        else:
            transf_steps = self.transformation.steps.all();
            for step in transf_steps:
                step_contains_pipeline = step.recursive_pipeline_check(pipeline);
                if step_contains_pipeline:
                    contains_pipeline = True;
        return contains_pipeline;

    def clean(self):
        """
        Check coherence of this step of the pipeline.

        - Does the transformation at this step contain the parent pipeline?
        - Are any (raw) inputs multiply-cabled?
        
        Also, validate each (raw) input cable, and each specified output deletion.

        A PipelineStep must be save()d before cables can be connected to
        it, but it should be clean before being saved. Therefore, this
        checks coherency rather than completeness, for which we call
        complete_clean() - such as cabling.
        """
        # Check recursively to see if this step's transformation contains
        # the specified pipeline at all.
        if self.recursive_pipeline_check(self.pipeline):
            raise ValidationError("Step {} contains the parent pipeline".
                                  format(self.step_num));

        # Check for multiple cabling to any of the step's inputs.
        for transformation_input in self.transformation.inputs.all():
            num_matches = self.cables_in.filter(transf_input=transformation_input).count()
            if num_matches > 1:
                raise ValidationError(
                    "Input \"{}\" to transformation at step {} is cabled more than once".
                    format(transformation_input.dataset_name, self.step_num))

        # Same thing for raw inputs.
        for curr_raw_input in self.transformation.raw_inputs.all():
            raw_matches = self.raw_cables_in.filter(transf_raw_input=curr_raw_input).count()
            if raw_matches > 1:
                raise ValidationError(
                    "Raw input \"{}\" to transformation at step {} is cabled more than once".
                    format(curr_raw_input.dataset_name, self.step_num))

        # Validate each cable (Even though we call PS.clean(), we want complete wires)
        for curr_cable in self.cables_in.all():
            curr_cable.clean_and_completely_wired()
            
        for curr_raw_cable in self.raw_cables_in.all():
            curr_raw_cable.clean()

        # Validate each PipelineStep output deletion
        for curr_del in self.outputs_to_delete.all():
            curr_del.clean()
            
        for curr_raw_del in self.raw_outputs_to_delete.all():
            curr_raw_del.clean()


    def complete_clean(self):
        """Executed after the step's wiring has been fully defined, and
        to see if all (raw) inputs are quenched exactly once.
        """
        self.clean()
            
        for transformation_input in self.transformation.inputs.all():
            # See if the input is specified more than 0 times (and
            # since clean() was called above, we know that therefore
            # it was specified exactly 1 time).
            num_matches = self.cables_in.filter(transf_input=transformation_input).count()
            if num_matches == 0:
                raise ValidationError("Input \"{}\" to transformation at step {} is not cabled".
                                      format(transformation_input.dataset_name, self.step_num))

        # Same thing for raw inputs.
        for curr_raw_input in self.transformation.raw_inputs.all():
            raw_matches = self.raw_cables_in.filter(transf_raw_input=curr_raw_input).count()
            if raw_matches == 0:
                raise ValidationError(
                    "Raw input \"{}\" to transformation at step {} is not cabled".
                    format(curr_raw_input.dataset_name, self.step_num))

class PipelineStepRawInputCable(models.Model):
    """
    The "cables" feeding into the raw inputs of a pipeline step's transformation.

    This connects a source pipeline raw input to a pipeline step's raw input.
    Unlike a PipelineStepInputCable, raw cables cannot have custom wiring (as
    we don't understand the data handed around by them).

    Related to :model:`copperfish.PipelineStep`
    """
    # The step this cable feeds into.
    pipelinestep = models.ForeignKey(PipelineStep, related_name = "raw_cables_in");
    
    # Raw input hole (TransformationRawInput) of the transformation
    transf_raw_input = models.ForeignKey(
        "TransformationRawInput",
        help_text="Cabling destination raw input hole",
        related_name="raw_cables_feeding_this_input");

    # Note: in this version we're only allowing raw inputs to connect
    # from "step 0" (i.e. the pipeline's own inputs) to a pipeline
    # step; no inter-step raw wiring is allowed.
    pipeline_raw_input = models.ForeignKey(
        "TransformationRawInput",
        help_text="Cabling source raw input hole",
        related_name="raw_cables_fed_by_this_input");

    def __unicode__(self):
        """
        Unicode representation of PipelineStepRawInputCable.

        The representation gives the pipeline step and the cabling destination input name,
        and is marked as "raw".
        """
        step_str = "[no pipeline step set]";
        if self.pipelinestep != None:
            step_str = unicode(self.pipelinestep);
        return "{}:{}(raw)".format(step_str, self.transf_raw_input.dataset_name);
    
    def clean(self):
        """
        Check coherence of the raw cable.

        - Does the input map to a pipeline raw input?
        - Does the cable map to an (existent) raw input of this step's transformation?
        
        PRE: the pipeline step's transformation is not the parent pipeline (this should
        never happen anyway).
        """
        input_requested = self.pipeline_raw_input;
        feed_to_input = self.transf_raw_input;
        step_trans = self.pipelinestep.transformation

        # Does this input cable come from a raw input of the parent pipeline?
        # Note: this depends on the pipeline step's transformation not equalling
        # the parent pipeline (which shouldn't ever happen).
        if not self.pipelinestep.pipeline.raw_inputs.filter(pk=input_requested.pk).exists():
            raise ValidationError(
                "Step {} requests raw input not coming from parent pipeline".
                format(self.pipelinestep.step_num));

        # Does the specified input defined for this transformation exist?
        if not step_trans.raw_inputs.filter(pk=feed_to_input.pk).exists():
            raise ValidationError(
                "Transformation at step {} does not have raw input \"{}\"".
                format(self.pipelinestep.step_num, unicode(feed_to_input)));


class PipelineStepInputCable(models.Model):
    """
    Represents the "cables" feeding into the transformation of a
    particular pipeline step, specifically:

    A) Destination of cable (transf_input_name) - step implicitly defined
    B) Source of the cable (step_providing_input, provider_output_name)

    Related to :model:`copperfish.PipelineStep`
    """
    
    # The step (Which has a transformation) where we define incoming cabling
    pipelinestep = models.ForeignKey(
            PipelineStep,
            related_name = "cables_in");
    
    # Input hole (TransformationInput) of the transformation
    # at this step to which the cable leads
    transf_input = models.ForeignKey(
            "TransformationInput",
            help_text="Wiring destination input hole");
    
    
    # (step_providing_input, provider_output) unambiguously defines
    # the source of the cable.  step_providing_input can't refer to a PipelineStep
    # as it might also refer to the pipeline's inputs (i.e. step 0).
    step_providing_input = models.PositiveIntegerField("Step providing the input source",
                                                       help_text="Cabling source step");

    content_type = models.ForeignKey(
            ContentType,
            limit_choices_to = {"model__in": ("TransformationOutput",
                                              "TransformationInput")});
    object_id = models.PositiveIntegerField();
    # Wiring source output hole.
    provider_output = generic.GenericForeignKey("content_type", "object_id");

    # step_providing_input must be PRIOR to this step (Time moves forward)

    # Coherence of data is already enforced by Pipeline

    def __unicode__(self):
        """Represent PipelineStepInputCable with the pipeline step, and the cabling destination input name"""
        step_str = "[no pipeline step set]";
        if self.pipelinestep != None:
            step_str = unicode(self.pipelinestep);
        return "{}:{}".format(step_str, self.transf_input.dataset_name);

    
    def clean(self):
        """Check coherence of the cable.
        
        - Does the input come from a prior step?
        - Does the cable map to an (existent) input of this step's transformation?
        - Does the requested output exist?
        - Do the input and output 'work together' (compatible min/max)?

        Whether the input and output have compatible CDTs or have valid custom
        wiring is checked via clean_and_completely_wired.
        """
        input_requested = self.provider_output;
        requested_from = self.step_providing_input;
        feed_to_input = self.transf_input;
        step_trans = self.pipelinestep.transformation

        # Does this input cable come from a step prior to this one?
        if requested_from >= self.pipelinestep.step_num:
            raise ValidationError(
                "Step {} requests input from a later step".
                format(self.pipelinestep.step_num));

        # Does the specified input defined for this transformation exist?
        if not step_trans.inputs.filter(pk=feed_to_input.pk).exists():
            raise ValidationError ("Transformation at step {} does not have input \"{}\"".
                                   format(self.pipelinestep.step_num, unicode(feed_to_input)));

        # Do the source and destination work together?
        # This checks:
        # - the source produces the requested data
        # - the source doesn't delete the requested data
        # - they have compatible min_row and max_row

        if requested_from == 0:
            # Get pipeline inputs of the cable's parent Pipeline,
            # and look for pipeline inputs that match the desired input.
            
            pipeline_inputs = self.pipelinestep.pipeline.inputs.all();
            if input_requested not in pipeline_inputs:
                raise ValidationError(
                    "Pipeline does not have input \"{}\"".
                    format(unicode(input_requested)));

        # If not from step 0, input derives from the output of a pipeline step
        else:

            

            # Look at the pipeline step referenced by the wiring parameter
            providing_step = self.pipelinestep.pipeline.steps.get(step_num=requested_from)

            # Does the source pipeline step produce the output requested?
            source_step_outputs = providing_step.transformation.outputs.all()
            if input_requested not in source_step_outputs:
                raise ValidationError(
                    "Transformation at step {} does not produce output \"{}\"".
                    format(requested_from, unicode(input_requested)))

            # Will the data from this step's transformation be deleted?
            # FIXME: Do we want to remove this?
            source_deleted_outputs = [x.dataset_to_delete
                                      for x in providing_step.outputs_to_delete.all()];
            if input_requested in source_deleted_outputs:
                raise ValidationError(
                    "Input \"{}\" from step {} to step {} is deleted prior to request".
                    format(input_requested.dataset_name, requested_from,
                           self.pipelinestep.step_num))

        # Check that the input and output connected by the
        # cable are compatible re: number of rows.  Don't check for
        # ValidationError because this was checked in the
        # clean() of PipelineStep.

        provided_min_row = 0
        required_min_row = 0

        # Source output row constraint
        if input_requested.min_row != None:
            provided_min_row = input_requested.min_row

        # Destination input row constraint
        if feed_to_input.min_row != None:
            required_min_row = feed_to_input.min_row

        # Check for contradictory min row constraints
        if (provided_min_row < required_min_row):
            raise ValidationError(
                "Data fed to input \"{}\" of step {} may have too few rows".
                format(feed_to_input.dataset_name, self.pipelinestep.step_num))

        provided_max_row = float("inf")
        required_max_row = float("inf")

        if input_requested.max_row != None:
            provided_max_row = input_requested.max_row

        if feed_to_input.max_row != None:
            required_max_row = feed_to_input.max_row

        # Check for contradictory max row constraints
        if (provided_max_row > required_max_row):
            raise ValidationError(
                "Data fed to input \"{}\" of step {} may have too many rows".
                format(feed_to_input.dataset_name, self.pipelinestep.step_num))

        # Validate whatever wires there already are
        if self.custom_wires.all().exists():
            for wire in self.custom_wires.all():
                wire.clean()

        
    def clean_and_completely_wired(self):
        """Check coherence of the cable, and check that it is correctly wired.

        This will call clean() as well as checking whether the input and output
        'work together' via having the same CDT or having good wiring.
        """
        # Check coherence of this cable otherwise.
        self.clean();
        
        input_requested = self.provider_output;
        feed_to_input = self.transf_input;
        
        # If CDTs don't match, check presence of custom wiring
        if input_requested.compounddatatype != feed_to_input.compounddatatype:
            if not self.custom_wires.all().exists():
                raise ValidationError(
                        "Custom wiring required for cable \"{}\"".
                        format(unicode(self)));

        # Validate whatever wires there are.
        if self.custom_wires.all().exists():

            # July 24, 2013: this bit moved to clean()
            # for wire in self.custom_wires.all():
            #     wire.clean()

            # Each destination CDT member of must be wired to exactly once

            # Get the CDT members of transf_input
            dest_members = self.transf_input.compounddatatype.members.all()

            # For each CDT member, check that there is exactly 1 custom_wire leading to it (IE, number of occurences of CDT member = dest_pin)
            for dest_member in dest_members:
                numwires = self.custom_wires.filter(dest_pin=dest_member).count()

                if numwires == 0:
                    raise ValidationError(
                        "Destination member \"{}\" has no wires leading to it".
                        format(unicode(dest_member)));

                if numwires > 1:
                    raise ValidationError(
                        "Destination member \"{}\" has multiple wires leading to it".
                        format(unicode(dest_member)));
 
class CustomCableWire(models.Model):
    """
    Defines a customized connection between internal steps of a pipeline.

    This allows us to filter/rearrange/repeat columns when handing
    data from a source TransformationXput (*Input if it's from the
    pipeline's own input, and *Output if it's from a previous step) to
    a destination TransformationInput between steps of a pipeline.

    The analogue here is that we have customized a cable by rearranging
    the connections between the pins.
    """

    # cable for which we are creating custom wiring
    pipelinestepinputcable = models.ForeignKey(
        PipelineStepInputCable,
        related_name = "custom_wires")

    # CDT member on the source output hole
    # We think of wires as connecting cable pins
    source_pin = models.ForeignKey(
        CompoundDatatypeMember,
        related_name="source_pins")

    # CDT member on the destination input hole
    dest_pin = models.ForeignKey(
        CompoundDatatypeMember,
        related_name="dest_pins")

    def clean(self):
        """
        Check the validity of this wire.

        The wire belongs to a cable which connects a source TransformationXput
        and a destination TransformationInput:
        - source_pin must be a member of the set of CDT members of the cable source
        (provider_output) TransformationXput;
        - dest_pin must be a member of the set of CDT members of the cable
        destination (transf_input) TransformationInput;
        - The datatype of the source_pin must match the datatype of the
        destination_pin.
        """

        source_CDT_members = self.pipelinestepinputcable.provider_output.compounddatatype.members.all()
        dest_CDT_members = self.pipelinestepinputcable.transf_input.compounddatatype.members.all()

        if not source_CDT_members.filter(pk=self.source_pin.pk).exists():
            raise ValidationError(
                "Source pin \"{}\" does not come from compounddatatype \"{}\"".
                format(unicode(self.source_pin), unicode(self.pipelinestepinputcable.provider_output.compounddatatype)))

        if not dest_CDT_members.filter(pk=self.dest_pin.pk).exists():
            raise ValidationError(
                "Destination pin \"{}\" does not come from compounddatatype \"{}\"".
                format(unicode(self.dest_pin), unicode(self.pipelinestepinputcable.provider_output.compounddatatype)))

        # Check that the datatypes on either side of this wire are
        # either the same, or that the source datatype is a
        # restriction of the destination datatype (thus you can feed
        # the source to the destination).
        if (self.source_pin.datatype != self.dest_pin.datatype and
                (not self.dest_pin.datatype.is_restricted_by(self.source_pin.datatype))):
            raise ValidationError(
                "The datatype of the source pin \"{}\" is incompatible with the datatype of the destination pin \"{}\"".
                format(unicode(self.source_pin), unicode(self.dest_pin)))
        

class PipelineStepDelete(models.Model):
    """
    Annotate that the dataset produced by the TO will be deleted.

    Related to :model:`copperfish.PipelineStep`
    """
    pipelinestep = models.ForeignKey(
            PipelineStep,
            related_name="outputs_to_delete");

    # Again, coherence of data will be enforced at the Python level
    # (i.e. does this actually refer to a Dataset that will be produced
    # by the Transformation at this step)

    # TransformationOutput of the transformation at this step to delete
    dataset_to_delete = models.ForeignKey(
            "TransformationOutput",
            help_text="Annotation to delete data once generated");

    def clean(self):
        """
        The output to be deleted must exist.
        """
        to_del = self.dataset_to_delete;

        if not self.pipelinestep.transformation.outputs.filter(pk=to_del.pk).exists():
            raise ValidationError(
                "Transformation at step {} does not have output \"{}\"".
                format(self.pipelinestep.step_num, unicode(to_del)));

class PipelineStepRawDelete(models.Model):
    """
    Annotate that the raw dataset produced by the TRO will be deleted.

    Related to :model:`copperfish.PipelineStep`
    """
    pipelinestep = models.ForeignKey(
            PipelineStep,
            related_name="raw_outputs_to_delete");

    # TransformationRawOutput of the transformation at this step to delete
    raw_dataset_to_delete = models.ForeignKey(
            "TransformationRawOutput",
            help_text="Annotation to delete raw data once generated");

    def clean(self):
        """
        The raw output to be deleted must exist in this pipeline step.
        """
        to_del = self.raw_dataset_to_delete;

        if not self.pipelinestep.transformation.raw_outputs.filter(pk=to_del.pk).exists():
            raise ValidationError(
                "Transformation at step {} does not have raw output \"{}\"".
                format(self.pipelinestep.step_num, unicode(to_del)));


class PipelineRawOutputCable(models.Model):
    """
    As for PipelineOutputCable but for raw outputs.

    This is simpler than the above because there can be no custom wiring.

    Related to :model:`copperfish.Pipeline`
    Related to :model:`copperfish.TransformationRawOutput`
    """
    pipeline = models.ForeignKey(
            Pipeline,
            related_name="raw_outcables");

    raw_output_name = models.CharField(
            "Raw output hole name",
            max_length=128,
            help_text="Pipeline raw output hole name");

    raw_output_idx = models.PositiveIntegerField(
            "Raw output hole index",
            validators=[MinValueValidator(1)],
            help_text="Pipeline raw output hole index");

    # PRE: step_providing_raw_output refers to an actual step of the
    # pipeline, and provider_raw_output_name actually refers to one of
    # the raw outputs at that step
    step_providing_raw_output = models.PositiveIntegerField(
            "Source pipeline step number",
            validators=[MinValueValidator(1)],
            help_text="Source step of raw output");

    provider_raw_output = models.ForeignKey(
            "TransformationRawOutput",
            help_text="Source raw output hole");
    
    # Enforce uniqueness of raw output names and indices.
    # Note: in the pipeline, these will still need to be compared with the non-raw
    # output names and indices.
    class Meta:
        unique_together =   (("pipeline", "raw_output_name"),
                            ("pipeline", "raw_output_idx"));

    def __unicode__(self):
        """Represent with the pipeline name, output index, and output name, and mark as raw."""
        pipeline_name = "[no pipeline set]";
        if self.pipeline != None:
            pipeline_name = unicode(self.pipeline);

        return "{}:{} ({} (raw))".format(pipeline_name, self.output_idx,
                                   self.output_name);


    def clean(self):
        """
        This raw cable must reference an existant, undeleted transformation raw output hole.
        """
        output_requested = self.provider_raw_output;
        requested_from = self.step_providing_raw_output;

        # Step number must be valid for this pipeline
        if requested_from > self.pipeline.steps.all().count():
            raise ValidationError(
                "Raw output requested from a non-existent step");
        
        providing_step = self.pipeline.steps.get(step_num=requested_from);

        # Try to find a matching raw output hole
        if (not providing_step.transformation.raw_outputs.
                filter(pk=output_requested.pk).exists()):
            raise ValidationError(
                "Transformation at step {} does not produce raw output \"{}\"".
                format(requested_from, unicode(output_requested)));

        # Also determine if raw output was deleted by the step producing it

        # FIXME: WILL WE BE REMOVING THIS? We are deleting the dataset LATER,
        # so, it is OK that a Dataset is marked as delete, it doesn't break
        # the pipeline definition
        if (providing_step.raw_outputs_to_delete.
                filter(raw_dataset_to_delete=output_requested).exists()):
            raise ValidationError(
                "Raw output \"{}\" from step {} is deleted prior to request".
                format(output_requested.dataset_name, requested_from))


class PipelineOutputCable(models.Model):
    """
    Defines which outputs of internal PipelineSteps are mapped to
    end-point Pipeline outputs once internal execution is complete.

    Thus, a definition of cables leading to external pipeline outputs.

    Related to :model:`copperfish.Pipeline`
    Related to :model:`copperfish.TransformationOutput` (Refactoring needed)
    """
    pipeline = models.ForeignKey(
            Pipeline,
            related_name="outcables");

    output_name = models.CharField(
            "Output hole name",
            max_length=128,
            help_text="Pipeline output hole name");

    # We need to specify both the output name and the output index because
    # we are defining the outputs of the Pipeline indirectly through
    # this wiring information - name/index mapping is stored...?
    output_idx = models.PositiveIntegerField(
            "Output hole index",
            validators=[MinValueValidator(1)],
            help_text="Pipeline output hole index");

    # PRE: step_providing_output refers to an actual step of the pipeline
    # and provider_output_name actually refers to one of the outputs
    # at that step
    # The coherence of the data here will be enforced at the Python level

    # step_providing_output = models.ForeignKey(
    #       PipelineStep,
    #       help_text="Source step at which output comes from");
    step_providing_output = models.PositiveIntegerField(
            "Source pipeline step number",
            validators=[MinValueValidator(1)],
            help_text="Source step at which output comes from");

    provider_output = models.ForeignKey(
            "TransformationOutput",
            help_text="Source output hole");
    
    # Enforce uniqueness of output names and indices.
    # Note: in the pipeline, these will still need to be compared with the raw
    # output names and indices.
    class Meta:
        unique_together =   (("pipeline", "output_name"),
                            ("pipeline", "output_idx"));

    def __unicode__(self):
        """ Represent with the pipeline name, output index, and output name (???) """
        pipeline_name = "[no pipeline set]";
        if self.pipeline != None:
            pipeline_name = unicode(self.pipeline);

        return "{}:{} ({})".format(pipeline_name, self.output_idx,
                                   self.output_name);


    def clean(self):
        """
        PipelineOutputCable must reference an existant, undeleted
        transformation output hole.
        """
        output_requested = self.provider_output;
        requested_from = self.step_providing_output;

        # Step number must be valid for this pipeline
        if requested_from > self.pipeline.steps.all().count():
            raise ValidationError(
                "Output requested from a non-existent step");
        
        providing_step = self.pipeline.steps.get(step_num=requested_from);

        # Try to find a matching output hole
        if not providing_step.transformation.outputs.filter(pk=output_requested.pk).exists():
            raise ValidationError(
                "Transformation at step {} does not produce output \"{}\"".
                format(requested_from, unicode(output_requested)));

        # Also determine if output was deleted by the step producing it
        # FIXME: Do we want to remove this? (Refer to previous comment)
        if (providing_step.outputs_to_delete.
                filter(dataset_to_delete=output_requested).exists()):
            raise ValidationError(
                "Output \"{}\" from step {} is deleted prior to request".
                format(output_requested.dataset_name, requested_from));

        # If custom wires exist, check that they define columns in a
        # CSV file that are indexed consecutively from 1 -- uniqueness
        # of column indices and column names is already enforced by a
        # constraint on CustomOutputCableWire.
        outwire_indices = [];
        for outwire in self.custom_outwires.all():
            outwire.full_clean();
            outwire_indices.append(outwire.dest_idx);

        if sorted(outwire_indices) != range(1, len(outwire_indices)+1):
            raise ValidationError(
                "Columns defined by custom wiring on output cable \"{}\" are not consecutively indexed from 1".format(unicode(self)));
 
class CustomOutputCableWire(models.Model):
    """
    Defines a customized connection from a pipeline's internal step to its output.

    This allows us to filter/rearrange/repeat columns when returning
    data from a particular step's TransformationOutput as the pipeline's output.

    The analogue here is similar to that of CustomCableWire.
    """

    # FIXME:
    # Need to change pipeline.create_outputs to accomodate custom wiring

    pipelineoutputcable = models.ForeignKey(
        PipelineOutputCable,
        related_name="custom_outwires")

    source_pin = models.ForeignKey(CompoundDatatypeMember)

    dest_name = models.CharField(
        "Destination column name",
        max_length=128,
        help_text="CDT name of this column in the pipeline output")

    dest_idx =  models.PositiveIntegerField(
        "Destination column index",
        validators=[MinValueValidator(1)],
        help_text="CDT index of this column in the pipeline output");

    # This matches the constraint on compound data type members
    # (Cannot have destination columns with the same name/index)
    class Meta:
        unique_together =   (("pipelineoutputcable", "dest_name"),
                            ("pipelineoutputcable", "dest_idx"));
    
    def clean(self):
        """
        source_pin must be a member of the set of CDT members of the cable source (provider_output) TransformationOutput
        """
        # Get the CDT members of the output-CDT referenced by this PipelineOutputCable
        source_CDT_members = self.pipelineoutputcable.provider_output.compounddatatype.members.all()
    
        if not source_CDT_members.filter(pk=self.source_pin.pk).exists():
            raise ValidationError(
                "Source pin \"{}\" does not come from compounddatatype \"{}\"".
                format(unicode(self.source_pin), unicode(self.pipelineoutputcable.provider_output.compounddatatype)))

class TransformationRawXput(models.Model):
    """
    Describes parameters common to all inputs and outputs
    of transformations - the "holes"

    Extends :model:`copperfish.TransformationXput`
    Extends :model:`copperfish.TransformationRawInput`
    Extends :model:`copperfish.TransformationRawOutput`
    """

    # TransformationXput describes the input/outputs of transformations
    # So this class can only be associated with method and pipeline
    content_type = models.ForeignKey(
            ContentType,
            limit_choices_to = {"model__in": ("method", "pipeline")});
    object_id = models.PositiveIntegerField();
    transformation = generic.GenericForeignKey("content_type", "object_id");

    # The name of the "input/output" hole
    dataset_name = models.CharField(
            "Input/output name",
            max_length=128,
            help_text="Name for input/output as an alternative to index");

    # Input/output index on the transformation

    ####### NOTE: ONLY METHODS NEED INDICES, NOT TRANSFORMATIONS....!!
    # If we differentiate between methods/pipelines... dataset_idx would only
    # belong to methods

    dataset_idx = models.PositiveIntegerField(
            "Input/output index",
            validators=[MinValueValidator(1)],
            help_text="Index defining the relative order of this input/output");

    class Meta:
        abstract = True;

        # A transformation cannot have multiple definitions for column name or column index
        unique_together = (("content_type", "object_id", "dataset_name"),
                           ("content_type", "object_id", "dataset_idx"));

    def __unicode__(self):
        return u"[{}]:raw{} {}".format(unicode(self.transformation),
                                       self.dataset_idx,
                                       self.dataset_name)

class TransformationRawInput(TransformationRawXput):
    """
    Inherits from :model:`copperfish.TransformationRawXput`
    """
    pass

class TransformationRawOutput(TransformationRawXput):
    """
    Inherits from :model:`copperfish.TransformationRawXput`
    """
    pass
        

class TransformationXput(TransformationRawXput):
    """
    Describes the "holes" that are managed by Shipyard: i.e. the ones
    that correspond to well-understood CSV formatted data.

    Extends :model:`copperfish.TransformationInput`
    Extends :model:`copperfish.TransformationOutput`
    """


    # The expected compounddatatype of the input/output
    compounddatatype = models.ForeignKey(CompoundDatatype);
    
    # Nullable fields indicating that this dataset has
    # restrictions on how many rows it can have
    min_row = models.PositiveIntegerField(
        "Minimum row",
        help_text="Minimum number of rows this input/output returns",
        null=True,
        blank=True);

    max_row = models.PositiveIntegerField(
        "Maximum row",
        help_text="Maximum number of rows this input/output returns",
        null=True,
        blank=True);

    class Meta:
        abstract = True;

        # This stuff is already enforced in TransformationRawXput.
        # A transformation cannot have multiple definitions for column name or column index
        #unique_together = (("content_type", "object_id", "dataset_name"),
        #                  ("content_type", "object_id", "dataset_idx"));

    def __unicode__(self):
        return u"[{}]:{} {} {}".format(unicode(self.transformation),
                                       self.dataset_idx,
                                       unicode(self.compounddatatype),
                                       self.dataset_name);

class TransformationInput(TransformationXput):
    """
    Inherits from :model:`copperfish.TransformationXput`
    """
    pass

class TransformationOutput(TransformationXput):
    """
    Inherits from :model:`copperfish.TransformationXput`
    """
    pass



class Run(models.Model):
    """
    Stores data associated with an execution of a pipeline.

    Related to :model:`copperfish.Pipeline`
    Related to :model:`copperfish.RunStep`
    Related to :model:`copperfish.AbstractDataset`
    """
    
    user = models.ForeignKey(User, help_text="User who performed this run")
    start_time = models.DateTimeField("start time",auto_now_add=True,help_text="Time at start of run")
    pipeline = models.ForeignKey(
        Pipeline,
        related_name="pipeline_instances",
        help_text="Pipeline used in this run")

    # If run was spawned within another run, parent_runstep denotes the run step that initiated it
    parent_runstep = models.OneToOneField(
        "RunStep",
        related_name="child_run",
        null=True,
        blank=True,
        help_text="Step of parent run initiating this one as a sub-run")



    def clean(self):
        """
        Checks coherence of the run (possibly in an incomplete state).

        Checks completeness and cleanliness of all registered steps,
        and checks their numbering.
        """

        # Run clean on individual run steps
        for run_step in self.run_steps.all():
            run_step.clean()

        # FIXME EXECUTE
            
    def complete_clean(self):
        """
        Checks coherence of a completed run.

        Recursively cleans all the steps (using complete_clean) and checks
        that the outputs of the run are OK:
         - there is exactly one (raw) dataset coming from each (raw) output of the pipeline
         - all non-raw outputs are verified
         - there is exactly one RunStep for each PipelineStep
         - all non-raw intermediate datasets are verified (via complete_clean-ing steps)
        """
        for run_step in self.run_steps.all():
            run_step.complete_clean()
        # FIXME EXECUTE (this will be an important part of execute)
            
    def is_finished(self):
        """
        Checks if this run is finished running.
        """
        result = False
        if self.run_steps.all().count() == self.pipeline.steps.all().count():
            result = True
        return result

class RunStep(models.Model):
    """
    Annotates the execution of a pipeline step within a run.

    Related to :model:`copperfish.Run`
    Related to :model:`copperfish.AbstractDataset`
    Related to :model:`copperfish.RunStepInput`
    Related to :model:`copperfish.RunStepRawInput`
    """

    run = models.ForeignKey(Run)
    pipelinestep = models.ForeignKey(
        PipelineStep,
        related_name="pipelinestep_instances")

    def clean(self):
        """
        a) Clean all input/output datasets
            -> Coherent intermediate_output TRO mapping?
            -> Valid CDT/row structure wrt intermediate_output?

        b) More than one dataset cannot be an output from a particular TRO
            -> Cannot use the same intermediate_output

        c) If this PipelineStep is a sub-pipeline (if child_run is registered),
        check that it is complete and clean.

        Note: don't need to check inputs for multiple quenching due to uniqueness.
        We couldn't use this trick for outputs because that would require a
        uniqueness constraint on Dataset involving (runstep, intermediate_output),
        which can be null. (Also for final_output)
        """

        # Get all datasets generated by this runstep
        outputs_used = []
        for out_data in self.copperfish_dataset_outputs.all():

            # Clean them individually (Validate intermediate_output TRO, and structure/rows if applicable)
            out_data.clean()

            # A runstep cannot have multiple Datasets outputs coming from the same intermediate_output TRO
            if out_data.intermediate_output in outputs_used:
                raise ValidationError(
                    "Output \"{}\" of RunStep \"{}\" is multiply-quenched".
                    format(out_data.intermediate_output, self))

            # Track TROs annotated as generating a dataset
            outputs_used.append(out_data.intermediate_output)

        # Analogous process for raw dataset outputs generated by this runstep
        raw_outputs_used = []
        for out_raw_data in self.copperfish_rawdataset_outputs.all():
            out_raw_data.clean()

            if out_raw_data.intermediate_raw_output in raw_outputs_used:
                raise ValidationError(
                    "Raw output \"{}\" of RunStep \"{}\" is multiply-quenched".
                    format(out_raw_data.intermediate_raw_output, self))

            raw_outputs_used.append(out_raw_data.intermediate_raw_output)

        # Clean inputs to this RunStep (Multiple quenching needn't be checked due to uniqueness)
        for in_data in self.input_datasets.all():
            in_data.clean()

        for in_raw_data in self.input_raw_datasets.all():
            in_raw_data.clean()

        # If the Transformation of pipelinestep is not a Pipeline, then
        # child_run should be None.

        # Workaround: for when the OneToOne field raises Run.DoesNotExist
        try:
            self_child_run = self.child_run
        except Run.DoesNotExist:
            self_child_run = None

        if (type(self.pipelinestep.transformation) != Pipeline and self_child_run != None):
            raise ValidationError(
               "Specified PipelineStep is not a method but a child run exists")

        # If child_run is not None:
        if self_child_run != None:
            # If the Transformation of pipelinestep is not a Pipeline, then
            # child_run should not have been set.
            if type(self.pipelinestep.transformation) != Pipeline:
                raise ValidationError(
                    "Specified PipelineStep is not a Pipeline but a child run exists")
            # The child_run should be complete and clean.
            self.child_run.complete_clean()
             
    def complete_clean(self):
        """
        Checks coherence and completeness of this step.
        
        If the specified PipelineStep is a sub-pipeline, then check
        that child_run is registered.

        FIXME ERIC should we really check quenching of inputs and
        outputs when we could be deleting intermediate data??
        """
        self.clean();
        if (type(self.pipelinestep.transformation) == Pipeline and
                self.child_run == None):
            raise ValidationError(
                "Specified PipelineStep is a Pipeline but no child run exists")


class RunStepInput(models.Model):
    """
    For a runstep, describes which datasets were fed as inputs into
    each relevent cable for the corresponding pipeline step.

    Related to :model:`copperfish.RunStep`
    Related to :model:`copperfish.Dataset`
    Related to :model:`copperfish.PipelineStepInputCable`
    """

    # FIXME ERIC note! Could we replace more "are these multiply-cabled/wired"
    # tests using uniqueness constraints? IE, ensure no cable is multiply fed.

    runstep = models.ForeignKey(
        RunStep,
        related_name="input_datasets",
        help_text="Run step who's inputs are being described")
    
    dataset = models.ForeignKey(
        "Dataset",
        help_text="Dataset fed as an input")

    cable_fed_to = models.ForeignKey(
        PipelineStepInputCable,
        help_text="Cable into which the dataset is fed")

    # Within a run, no cable can have more than 1 dataset fed into it at once
    class Meta:
        unique_together =   (("runstep", "cable_fed_to"))

    def __unicode__(self):
        """
        Display the runstep being annotated, along with the dataset and cable.
        """
        return "Runstep {} has input dataset {} feeding into cable {}".format(
                unicode(self.runstep),
                unicode(self.dataset),
                unicode(self.cable_fed_to))

    def clean(self):
        """
        Check coherence of this Dataset-to-input cable relationship.

        A) The referenced cable belongs to the runstep's corresponding pipeline step
        B) The dataset can be fed into the cable (Matches CDT + min/max row constraints)
        """

        # The cable (cable_fed_to) must belong to the runstep's PS
        if not self.runstep.pipelinestep.cables_in.filter(pk=self.cable_fed_to.pk).exists():
            raise ValidationError(
                "Cable \"{}\" for RunStepInput \"{}\" does not belong to the correct PipelineStep".
                format(self.cable_fed_to,
                       self))

        # CDT of the dataset must match the CDT of the source of the cable (provider_output)
        if self.dataset.compounddatatype != self.cable_fed_to.provider_output.compounddatatype:
            raise ValidationError(
                "Dataset \"{}\" is not of the expected CDT".format(self.dataset))

        # Input dataset must satisfy the target transformation input min_row/max_row constraints
        destination_hole = self.cable_fed_to.transf_input
        if destination_hole.min_row != None and self.dataset.num_rows() < destination_hole.min_row:
            raise ValidationError(
                "Dataset \"{}\" has too few rows for TransformationInput \"{}\"".
                format(self.dataset, destination_hole))
        
        if destination_hole.max_row != None and self.dataset.num_rows() > destination_hole.max_row:
            raise ValidationError(
                "Dataset \"{}\" has too many rows for TransformationInput \"{}\"".
                format(self.dataset, destination_hole))


class RunStepRawInput(models.Model):
    """
    For a runstep, describes which raw datasets were fed as raw inputs into
    each relevent raw cable for the corresponding pipeline step.

    This must come from an (?) input (?) to the generating pipeline.

    Related to :model:`copperfish.RunStep`
    Related to :model:`copperfish.RawDataset`
    Related to :model:`copperfish.PipelineStepRawInputCable`
    """
    runstep = models.ForeignKey(
        RunStep,
        related_name="input_raw_datasets",
        help_text="Run step this raw input feeds")
    
    rawdataset = models.ForeignKey(
        "RawDataset",
        help_text="RawDataset used as input")

    raw_cable_fed_to = models.ForeignKey(
        PipelineStepRawInputCable,
        help_text="Raw input cable into which the raw dataset is fed")
    
    # Within a run, no cable can have more than 1 dataset fed into it
    class Meta:
        unique_together =   (("runstep", "raw_cable_fed_to"));

    def __unicode__(self):
        """
        Display the runstep being annotated, along with the raw dataset and raw cable.
        """
        return "Runstep {} has input raw dataset {} feeding into cable {}".format(
                unicode(self.runstep),
                unicode(self.rawdataset),
                unicode(self.raw_cable_fed_to))
        
    def clean(self):
        """Check coherence of this raw dataset-raw input relationship.

        We check that the specified cable belongs to the PipelineStep
        corresponding to the specified RunStep.
        """
        
        # The referenced cable (raw_cable_fed_to) must belong to the runstep's PS raw_cables_in
        if not self.runstep.pipelinestep.raw_cables_in.filter(pk=self.raw_cable_fed_to.pk).exists():
            raise ValidationError(
                "Specified raw cable for RunStepRawInput \"{}\" does not belong to the corresponding PipelineStep".
                format(self));

class AbstractDataset(models.Model):
    """
    Data files uploaded by users or created by transformations.

    Related to :model:`copperfish.RunStep`
    Related to :model:`copperfish.Run`

    The clean() functions associated with Raw/Non-raw datasets should be
    used when a pipeline is executed to confirm that the dataset structure
    is consistent with what's expected from the pipeline definition.
    
    The code looks like it's checking for things Pipeline.clean() checks,
    but it's for a different purpose:

    Pipeline.clean() checks that the pipeline is well-defined in theory,
    while Dataset.clean() ensures the Pipeline produces what is expected.

    This would catch deviations between the script and the Pipeline's
    definition of that script.
    """

    user = models.ForeignKey(User,help_text="User that uploaded this dataset.")

    name = models.CharField(
        "Dataset name",
        max_length=128,
        help_text="Description of this dataset.")

    description = models.TextField("Dataset description")

    date_created = models.DateTimeField(
        "Date created",
        auto_now_add=True,
        help_text="Date of dataset upload.")

    # Four cases from which datasets can originate:
    #
    # Case 1: Comes from a runstep but not a run
    # Case 2: Comes from a run but not a run step
    # Case 3: Comes from neither a run nor a runstep (Is uploaded)
    # Case 4: Comes from both a run, and also a run step (Run within a run)

    # If this is an intermediary dataset, it is produced by a runstep
    runstep = models.ForeignKey(
        "RunStep",
        related_name="%(app_label)s_%(class)s_outputs",
        null=True,
        blank=True,
        help_text="Run step dataset was created by (If applicable)")

    # If this is a final dataset, it is produced by a run
    run = models.ForeignKey(
        "Run",
        related_name="%(app_label)s_%(class)s_final_outputs",
        null=True,
        blank=True,
        help_text="Run step this dataset was created by (If applicable)")

    # All datasets are stored in the "Datasets" folder
    dataset_file = models.FileField(
        upload_to="Datasets",
        help_text="Physical file system path where datasets are stored",
        null=False)

    MD5_checksum = models.CharField(max_length=64,help_text="Validates file integrity")
    
    class Meta:
        abstract = True

    def __unicode__(self):
        """
        Display Dataset name, user, and date created.
        """

        return "{} (created by {} on {})".format(
            self.name,
            unicode(self.user),
            self.date_created)

    def clean(self):
        """
        Compute MD5 checksum for the dataset.
        """

        try:
            md5gen = hashlib.md5()
            self.dataset_file.open()
            md5gen.update(self.dataset_file.read())
            self.MD5_checksum = md5gen.hexdigest()

        except ValueError as e:
            print(e)
            self.MD5_checksum = ""


class Dataset(AbstractDataset):
    """
    Data with a Shipyard-compliant structure: a CSV file with a header.
    Encodes the CDT, and the transformation output generating this data.

    Inherits from :model:`copperfish.AbstractDataset`
    Related to :model:`copperfish.RunStep`
    Related to :model:`copperfish.Run`
    Related to :model:`copperfish.CompoundDatatype`
    Related to :model:`copperfish.TransformationOutput`
    Related to :model:`copperfish.RunStepInput`
    """

    # Output hole within a pipeline the Dataset comes from (if an intermediate dataset)
    intermediate_output = models.ForeignKey(
        "TransformationOutput",
        null=True,
        blank=True,
        help_text="Intermediate output 'hole' this dataset comes from (if applicable)",
        related_name="intermediate_datasets")

    # Output hole of a pipeline the Dataset comes from (if a final dataset)
    final_output = models.ForeignKey(
        "TransformationOutput",
        null=True,
        blank=True,
        help_text="Final output 'hole' this dataset comes from (if applicable)",
        related_name="final_datasets")

    compounddatatype = models.ForeignKey(
        CompoundDatatype,
        related_name="conforming_datasets")


    def clean(self):
        """
        a) Compute MD5 checksum for the dataset
        b) Check that it's source (intermediate/final output) is correctly specified
                
        FIXME: will have to be amended to validate each atomic data field
        in the file when doing execute.
        """

        # Compute MD5 checksum (if necessary)
        super(Dataset, self).clean()
        

        data_csv = csv.DictReader(self.dataset_file)
        header = data_csv.fieldnames
        cdt_members = self.compounddatatype.members.all()

        # The number of CSV columns must match the number of CDT members
        if len(header) != cdt_members.count():
            raise ValidationError(
                "Dataset \"{}\" does not have the same number of columns as its CDT".
                format(unicode(self)))

        # CDT definition must be coherent with the CSV header: ith cdt member must
        # have the same name as the ith CSV header
        for cdtm in self.compounddatatype.members.all():
            if cdtm.column_name != header[cdtm.column_idx-1]:
                raise ValidationError(
                    "Column {} of Dataset \"{}\" is named {}, not {} as specified by its CDT".
                    format(cdtm.column_idx, unicode(self), header[cdtm.column_idx-1], cdtm.column_name))

        
        # FIXME: validate the actual data in the file with unit test scripts
        


        # AbstractDataset.runstep and intermediate_output must be specified together
        if self.runstep == None and self.intermediate_output != None:
            raise ValidationError("No RunStep specified but an intermediate output is")

        elif self.runstep != None and self.intermediate_output == None:
            raise ValidationError("RunStep is specified but no output from it is")


        # Recall, intermediate_output references the TRO which generated this Dataset
        # Check that this TRO is "runstep-consistent" - that the TRO referenced belongs
        # to the transformation linked to this runstep's PS transformation
        if self.runstep != None and self.intermediate_output != None:

            if self.runstep.pipelinestep.transformation != self.intermediate_output.transformation:
                raise ValidationError(
                    "PipelineStep of specified RunStep does not produce specified TransformationOutput");

            # The intermediary_output TRO is "runstep-consistent", but we still
            # need to check that the CDT specified by the TRO matches this dataset's CDT
            if self.compounddatatype != self.intermediate_output.compounddatatype:
                raise ValidationError(
                    "Dataset CDT does not match the CDT of the generating TransformationOutput")
            
            # Note: Don't check custom wiring. There is no reason to reorder outputs until fed to another PS
            # (CAN WE CLARIFY WHAT THIS MEANS?)


            # Check that Dataset satisfies TRO min/max-row constraints of TRO intermediate_output
            if (self.intermediate_output.min_row != None and self.num_rows() < self.intermediate_output.min_row):
                raise ValidationError(
                    "Dataset \"{}\" was produced by TransformationOutput \"{}\" but has too few rows".
                    format(self, self.intermediate_output))
            
            if (self.intermediate_output.max_row != None and self.num_rows() > self.intermediate_output.max_row):
                raise ValidationError(
                    "Dataset \"{}\" was produced by TransformationOutput \"{}\" but has too many rows".
                    format(self, self.intermediate_output))



        # If Dataset is the final output of a run: run and final_output are specified together.
        if self.run == None and self.final_output != None:
            raise ValidationError("No Run specified but a final output is")
        
        elif self.run != None and self.final_output == None:
            raise ValidationError("Run is specified but no final output from it is")

        # Recall, final_output references the TRO of a pipeline that produced this Dataset.
        # final_output must be "run-consistent" - the TRO referenced belongs to the pipeline
        # linked to this run (And the CDT of the dataset must match the CDT of the TRO)
        if self.run != None and self.final_output != None:

            if self.run.pipeline != self.final_output.transformation:
                raise ValidationError(
                    "Pipeline of specified Run does not produce specified TransformationOutput")
            
            if self.compounddatatype != self.final_output.compounddatatype:
                raise ValidationError(
                    "Dataset CDT does not match the CDT of the generating TransformationOutput")

            # Check that Dataset satisfies TRO min/max-row constraints of TRO final_output
            if (self.final_output.min_row != None and self.num_rows() < self.final_output.min_row):
                raise ValidationError(
                    "Dataset \"{}\" was produced by TransformationOutput \"{}\" but has too few rows".
                    format(self, self.final_output))
            
            if (self.final_output.max_row != None and self.num_rows() > self.final_output.max_row):
                raise ValidationError(
                    "Dataset \"{}\" was produced by TransformationOutput \"{}\" but has too many rows".
                    format(self, self.final_output))


    def num_rows(self):
        """Reports the number of rows belonging to the CSV file (excluding header)."""
        # Note: we don't check for the integrity of self.dataset_file as that will
        # be checked when calling clean().

        # From http://stackoverflow.com/questions/845058/how-to-get-line-count-cheaply-in-python
        return (sum(1 for line in self.dataset_file) - 1);

        # FIXME: do we need to close and reopen self.dataset_file at the end of this
        # script?  Find out by running twice consecutively.
    
class RawDataset(AbstractDataset):
    """
    Data without a Shipyard-compliant structure.
    For example, a FASTA file or a Newick file.

    Annotates the raw TRO from a pipeline step or pipeline that
    generated this dataset.

    Inherits from :model:`copperfish.AbstractDataset`
    Related to :model:`copperfish.PipelineStep` (??)
    Related to :model:`copperfish.TransformationRawOutput`
    Related to :model:`copperfish.RunStepRawInput`
    """

    # Raw output hole within a pipeline the RawDataset comes from (if an intermediate dataset)
    intermediate_raw_output = models.ForeignKey(
        "TransformationRawOutput",
        null=True,
        blank=True,
        help_text="Intermediate raw output 'hole' this raw dataset comes from (if applicable)",
        related_name="intermediate_raw_datasets");

    # Raw output hole within a pipeline the RawDataset comes from (if a final dataset)
    final_raw_output = models.ForeignKey(
        "TransformationRawOutput",
        null=True,
        blank=True,
        help_text="Final raw output 'hole' this raw dataset comes from (if applicable)",
        related_name="final_raw_datasets");
    
    def __unicode__(self):
        """
        Display the name, user, and date created, and mark as a raw Dataset.
        """
        return "{}(raw) (created by {} on {})".format(
                self.name,
                unicode(self.user),
                self.date_created);

    def clean(self):
        """
        a) Compute MD5 checksum for the raw dataset
        b) Check that the source (intermediate/final raw_output) is coherent with
           the pipeline definition
        """
        
        # Compute MD5 checksum if necessary
        super(RawDataset, self).clean()
        
        # If RawDataset is an intermediary dataset, runstep and
        # intermediate_raw_output must be specified together.
        if self.runstep == None and self.intermediate_raw_output != None:
            raise ValidationError("No RunStep specified but an intermediate raw output is")
        
        elif self.runstep != None and self.intermediate_raw_output == None:
            raise ValidationError("RunStep is specified but no raw output from it is")


        # The raw TRO intermediate_raw_output must come from the same transformation
        # linked to by the runstep's PS transformation
        if self.runstep != None and self.intermediate_raw_output != None:
            if self.runstep.pipelinestep.transformation != self.intermediate_raw_output.transformation:
                raise ValidationError(
                    "PipelineStep of specified RunStep does not produce specified TransformationRawOutput")



        # If RawDataset is a final output, run and final_output must
        # be specified together
        if self.run == None and self.final_raw_output != None:
            raise ValidationError("No Run specified but a final raw output is")
        
        elif self.run != None and self.final_raw_output == None:
            raise ValidationError("Run is specified but no final raw output from it is")


        # The raw TRO final_raw_output must belong to the pipeline linked to run
        if self.run != None and self.final_raw_output != None:
            if self.run.pipeline != self.final_raw_output.transformation:
                raise ValidationError(
                    "Pipeline of specified Run does not produce specified TransformationRawOutput")
