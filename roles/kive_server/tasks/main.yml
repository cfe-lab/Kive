---

- name: install package dependencies
  become: true
  block:
    - name: install postgresql
      dnf:
        name:
          - postgresql12-server
          - httpd
          - python3-mod_wsgi


- name: httpd configuration
  become: true
  block:
    - name: httpd conf file
      copy:
        src: 001-kive.conf
        dest: /etc/httpd/conf.d/
    - name: kive web conf file
      template:
        src: kive_apache.conf.j2
        dest: /etc/kive/kive_apache.conf
        owner: kive
        group: kive
        mode: "640"
    - name: server environment variables via systemd
      blockinfile:
        path: /etc/systemd/system/httpd.service.d/override.conf
        create: true
        backup: true
        mode: "644"
        block: |
          [Service]
          EnvironmentFile=/etc/kive/kive_apache.conf
          Environment=APACHE_RUN_USER=kive
          Environment=APACHE_RUN_GROUP=kive
    - name: update httpd.conf
      loop:
        - from: "Listen 80$"
          to: "Listen {{ kive_listen_port }}"
        - from: "User apache$"
          to: "User {{ kive_httpd_user }}"
        - from: "Group apache$"
          to: "Group {{kive_httpd_group }}"
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: "{{ item.from }}"
        replace: "{{ item.to }}"
    - name: apache log purge settings
      loop:
        - from: 'ErrorLog "logs/error_log"'
          to: ErrorLog "|/usr/sbin/rotatelogs -l -p /usr/sbin/purge_apache_logs /var/log/httpd/error_log.%Y-%m-%d-%H%M%S 15M
        - from: 'CustomLog "logs/access_log" combined'
          to: CustomLog "|/usr/sbin/rotatelogs -l -p /usr/sbin/purge_apache_logs /var/log/httpd/access_log.%Y-%m-%d-%H%M%S 15M" combined
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: "{{ item.from }}"
        replace: "{{ item.to }}"
    - name: enable httpd
      systemd:
        name: httpd
        state: started
        enabled: true
    - name: ensure firewalld is running
      systemd:
        name: firewalld
        state: started
        enabled: true
    - name: firewall's internal interface
      ansible.posix.firewalld:
        zone: internal
        interface: "{{ kive_internal_interface }}"
        permanent: yes
        immediate: yes
        state: enabled
    - name: firewall's external interface
      ansible.posix.firewalld:
        zone: external
        interface: "{{ kive_external_interface }}"
        permanent: yes
        immediate: yes
        state: enabled
    - name: permit https service through firewall
      ansible.posix.firewalld:
        zone: external
        service: https
        permanent: yes
        immediate: yes
        state: enabled
    - name: permit http service through firewall
      ansible.posix.firewalld:
        zone: external
        service: http
        permanent: yes
        immediate: yes
        state: enabled


- name: configure postgres server
  become: true
  become_user: postgres
  block:
    - name: ensure database is initialized
      become: true
      become_user: root
      command:
        cmd: "/usr/pgsql-12/bin/postgresql-12-setup initdb"
        creates: "/var/lib/pgsql/12/data/PG_VERSION"
    - name: start database service
      become: true
      become_user: root
      systemd:
        name: "postgresql-12"
        state: started
        enabled: true
    - name: local database settings
      notify: Restart postgresql service
      loop:
        - name: listen_addresses
          value: "*"
        - name: password_encryption
          value: scram-sha-256
      postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
    - name: add kive entries to pg_hba.conf
      block:
        - name: local connections
          notify: Restart postgresql service
          postgresql_pg_hba:
            contype: local
            dest: "/var/lib/pgsql/12/data/pg_hba.conf"
            databases: all
            users: kive
            method: "scram-sha-256"
        - name: host connections
          notify: Restart postgresql service
          postgresql_pg_hba:
            contype: host
            dest: "/var/lib/pgsql/12/data/pg_hba.conf"
            databases: all
            users: kive
            source: "{{kive_db_host}}/24"
            method: "scram-sha-256"
    - name: add barman entries to postgresql.conf
      loop:
        - option: archiver
          value: "on"
        # First, setting up a streaming backup.
        - option: wal_level
          value: "'replica'"
        - option: max_wal_senders
          value: 10
        - option: max_replication_slots
          value: 10
          # Additionally, setting up standard WAL archiving.
        - option: archive_mode
          value: "on"
        - option: archive_command
          value: "'barman-wal-archive localhost kive %p'"
      community.general.ini_file:
        backup: yes
        path: /var/lib/pgsql/12/data/postgresql.conf
        create: no
        section: null
        option: "{{ item.option }}"
        value: "{{ item.value }}"


- name: kive installation
  block:
    - name: build kive API
      become: true
      command:
        cmd: "{{ kive_venv }}/bin/python setup.py install"
        chdir: "{{ kive_root }}/api/"
        creates: "{{ kive_root }}/api/build/"
    - name: collect kive's static files
      notify: restart http server
      environment:
        KIVE_STATIC_ROOT: "{{ kive_static_root }}"
      community.general.django_manage:
        command: collectstatic
        app_path: "{{ kive_root }}/kive"
        virtualenv: "{{ kive_venv }}"


- name: set up log purging
  become: true
  block:
    - name: apache log purge script
      copy:
        src: purge_apache_logs
        dest: /usr/sbin
        mode: "755"
    - name: purge service files
      loop:
        - kive_purge.service
        - kive_purge.timer
        - kive_purge_synch.service
        - kive_purge_synch.timer
      copy:
        src: "{{ item }}"
        dest: /etc/systemd/system
    - name: purge config file
      template:
        src: kive_purge.conf.j2
        dest: /etc/kive/kive_purge.conf
        owner: kive
        group: kive
        mode: "640"
    - name: enable and start kive_purge timers
      loop:
        - kive_purge.timer
        - kive_purge_synch.timer
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started



- name: set up kive database
  block:
    - name: create kive database
      become: true
      become_user: postgres
      postgresql_db:
        name: kive
    - name: create kive database user
      become: true
      become_user: postgres
      environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"
      postgresql_user:
        name: kive
        password: "{{ kive_db_password }}"
        db: kive
        priv: ALL
    - name: run django migrations
      environment:
          KIVE_DB_NAME: "{{ kive_db_name }}"
          KIVE_DB_USER: "{{ kive_db_user }}"
          KIVE_DB_HOST: "{{kive_db_host }}"
          KIVE_DB_PASSWORD: "{{ kive_db_password}}"
      become: true
      become_user: kive
      community.general.django_manage:
        command: migrate
        app_path: "{{ kive_root }}/kive"
        virtualenv: "{{ kive_venv }}"

- name: database backup global config
  loop:
    - option: path_prefix
      value: /usr/pgsql-12/bin/
    - option: archiver
      value: "on"
  community.general.ini_file:
    backup: yes
    path: /etc/barman.conf
    create: no
    section: barman
    option: "{{ item.option }}"
    value: "{{ item.value }}"

- name: database backup kive config
  loop:
    - option: description
      value: Kive database
    - option: conninfo
      value: host=localhost user=barman dbname=kive
    - option: backup_method
      value: postgres
    - option: backup_directory
      value: "{{ kive_backup_path }}/BarmanDBBackup"
    - option: compression
      value: bzip2
    # archiver = on is necessary for the "fallback" WAL backup that happens via
    # PostgreSQL's archive_command setting in postgresql.conf (which we have
    # configured to use barman-wal-archive
    - option: archiver
      value: "on"
    - option: streaming_conninfo
      value: host=localhost user=streaming_barman dbname=kive
    - option: streaming_archiver
      value: "on"
    - option: slot_name
      value: barman
    - option: minimum_redundancy
      value: 2
    - option: retention_policy
      value: REDUNDANCY 2
  community.general.ini_file:
    path: /etc/barman.d/kive.conf
    section: kive
    option: "{{ item.option }}"
    value: "{{ item.value }}"

- name: parse admin e-mails from json
  set_fact:
    mail_admins_list: "{{ kive_admins | from_json }}"

- name: build admin e-mails list
  loop: "{{ mail_admins_list }}"
  set_fact:
    mail_admins_emails: "{{ (mail_admins_emails | default([])) + [item.1] }}"

- name: barman service file
  template:
    src: barman_backup.service.j2
    dest: /etc/systemd/system/barman_backup.service
- name: barman timer file
  copy:
    src: barman_backup.timer
    dest: /etc/systemd/system
- name: enable and start barman timer
  systemd:
    name: barman_backup.timer
    enabled: true
    state: started
