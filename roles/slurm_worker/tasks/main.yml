---

- become: true
  block:
    - name: ensure firewalld is running
      systemd:
        name: firewalld
        state: started
        enabled: true
    - name: open slurm ports
      loop:
        - 6817-6819/tcp
        - 6817-6819/udp
        - 7321/tcp
      ansible.posix.firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: true
        immediate: true
    - name: mount /data
      ansible.posix.mount:
        path: /data
        src: "{{kive_db_host}}:/data"
        fstype: nfs
        state: mounted

    - name: mount /opt
      ansible.posix.mount:
        path: /opt
        src: "{{kive_db_host}}:/opt"
        fstype: nfs
        state: mounted
        opts: ro

    - name: mount /usr/local
      ansible.posix.mount:
        path: /usr/local
        src: "{{kive_db_host}}:/usr/local"
        fstype: nfs
        state: mounted
        opts: ro

    - name: check if original /home has been renamed
      stat: path=/original_home
      register: home_backed_up

    - name: rename original /home
      command: mv /home /original_home
      when: not home_backed_up.stat.exists

    - name: symbolic link for /home
      file:
        path: /home
        src: /data/home
        state: link

    - name: read system users
      delegate_to: localhost
      register: user_list
      community.general.read_csv:
        path: /etc/passwd
        delimiter: ":"
        fieldnames:
          - name
          - passwdx
          - uid
          - gid
          - info
          - home
          - shell
    - name: read system groups
      delegate_to: localhost
      register: group_list
      community.general.read_csv:
        path: /etc/group
        delimiter: ":"
        fieldnames:
          - name
          - passwdx
          - gid
          - users
    - name: record group members
      loop: "{{ group_list.list }}"
      when: item.name in copied_groups
      set_fact:
        group_name: "{{ item.name }}"
        group_members: "{{ item.users.split(',') }}"
      register: system_groups
    - name: build user groups
      with_subelements:
        - "{{ system_groups.results }}"
        - ansible_facts.group_members
      when: item.1 != ''
      set_fact:
        user_groups: "{{ user_groups | default({}) | combine({ item.1: [item.0.ansible_facts.group_name] }, list_merge='append') }}"
    - name: read system passwords
      delegate_to: localhost
      register: shadow_dict
      community.general.read_csv:
        path: /etc/shadow
        delimiter: ":"
        key: name
        fieldnames:
          - name
          - passwd
          - lastchanged
          - min
          - max
          - warn
          - inactive
          - expire
    - name: copy system groups
      loop: "{{ group_list.list }}"
      when: >
        (item.name in copied_groups) or
        (item.name in shadow_dict.dict and shadow_dict.dict[item.name]['passwd'].startswith("$"))
      group:
        gid: "{{ item.gid }}"
        name: "{{ item.name }}"
    - name: copy system users
      loop: "{{ user_list.list }}"
      when: shadow_dict.dict[item.name]['passwd'].startswith("$")
      user:
        uid: "{{ item.uid }}"
        create_home: no
        name: "{{ item.name }}"
        password: "{{ shadow_dict.dict[item.name]['passwd'] }}"
