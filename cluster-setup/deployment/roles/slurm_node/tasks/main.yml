---

- name: check if Slurm is present and has been built
  # Here, we'll use the systemd service as a proxy.
  block:
    - name: check if the Slurm systemd service exists
      stat: path=/usr/local/lib/systemd/system/slurmd.service
      register: slurmd_service

    - name: fail if the systemd service isn't there
      fail:
        msg: "slurmd systemd service is not in place."
      when: not slurmd_service.stat.exists

  rescue:
    - name: inform user to build Slurm first and propagate failure to stop the playbook
      fail:
        msg: "Before setting up this node, build Slurm using the slurm_builder task on the head node!"

#- name: create slurm user
#  become: true
#  user:
#    name: slurm
#    system: yes
#    create_home: no
#    uid: 9634

- name: enable slurmd service
  systemd:
    name: slurmd
    state: started
    enabled: true

#- name: install slurmd using apt
#  become: true
#  apt:
#    name:
#      - slurmd
#    state: present
#
#- name: install slurm-client using apt
#  become: true
#  apt:
#    name:
#      - slurm-client

#- name: add slurm config files
#  become: true
#  block:
#    - name: copy cgroup config file
#      notify: reconfigure slurm
#      copy:
#        src: cgroup.conf
#        dest: /usr/local/etc
#        owner: slurm
#        group: slurm
#        mode: "644"
#    - name: generate and copy slurm config file
#      notify: reconfigure slurm
#      template:
#        src: slurm.conf.j2
#        dest: /usr/local/etc/slurm.conf
#        owner: slurm
#        group: slurm
#        mode: "644"

#- name: network drive mounts
#  become: true
#  block:
#  - loop: "{{ network_mounts }}"
#    name: Load network drive mounts from env_vars.yml
#    ansible.posix.mount:
#      path: "{{ item.path }}"
#      src: "{{ item.src }}"
#      fstype: "{{ item.fstype }}"
#      state: "{{ item.state }}"
#      opts: "{{ item.opts }}"
