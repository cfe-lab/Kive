---

- name: read system users
  delegate_to: localhost
  register: user_list
  community.general.read_csv:
    path: /etc/passwd
    delimiter: ":"
    fieldnames:
      - name
      - passwdx
      - uid
      - gid
      - info
      - home
      - shell

- name: read system groups
  delegate_to: localhost
  register: group_list
  community.general.read_csv:
    path: /etc/group
    delimiter: ":"
    fieldnames:
      - name
      - passwdx
      - gid
      - users

- name: record group members
  loop: "{{ group_list.list }}"
  when: item.name in copied_groups
  set_fact:
    group_name: "{{ item.name }}"
    group_members: "{{ item.users.split(',') }}"
  register: system_groups

- name: build user groups
  with_subelements:
    - "{{ system_groups.results }}"
    - ansible_facts.group_members
  when: item.1 != ''
  set_fact:
    user_groups: "{{ user_groups | default({}) | combine({ item.1: [item.0.ansible_facts.group_name] }, list_merge='append') }}"

- name: read system passwords
  delegate_to: localhost
  register: shadow_dict
  community.general.read_csv:
    path: /etc/shadow
    delimiter: ":"
    key: name
    fieldnames:
      - name
      - passwd
      - lastchanged
      - min
      - max
      - warn
      - inactive
      - expire

- name: copy system groups
  loop: "{{ group_list.list }}"
  when: >
    (item.name in copied_groups) or
    (item.name in shadow_dict.dict and shadow_dict.dict[item.name]['passwd'].startswith("$"))
  group:
    gid: "{{ item.gid }}"
    name: "{{ item.name }}"

- name: copy system users
  loop: "{{ user_list.list }}"
  when: shadow_dict.dict[item.name]['passwd'].startswith("$")
  user:
    uid: "{{ item.uid }}"
    create_home: no
    name: "{{ item.name }}"
    password: "{{ shadow_dict.dict[item.name]['passwd'] }}"
